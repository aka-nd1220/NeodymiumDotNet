using System;
using System.Collections.Generic;
using System.Linq;
using Xunit;

namespace NeodymiumDotNet.Test
{
    public class NdArray_ToStringTest
    {

        private static readonly string _NewLine = Environment.NewLine;


        public static IEnumerable<object[]> TestBasicArgs()
        {
            yield return new object[]
            {
                NdArray.Create(new[] { 0, 1, 2, 3 }),
                "NdArray({0, 1, 2, 3})"
            };
            yield return new object[]
            {
                NdArray.Create(new[,] { { 0, 1, 2, 3 }, { 4, 5, 6, 7 }, { 8, 9, 10, 11 } }),
                "NdArray({{ 0,  1,  2,  3}," + _NewLine +
                "         { 4,  5,  6,  7}," + _NewLine +
                "         { 8,  9, 10, 11}})"
            };
            yield return new object[]
            {
                NdArray.Create(new[,]
                {
                    {
                        0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,
                        15,  16,  17,  18,  19
                    },
                    {
                        20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,
                        34,  35,  36,  37,  38,  39
                    },
                    {
                        40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,
                        54,  55,  56,  57,  58,  59
                    },
                    {
                        60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,
                        74,  75,  76,  77,  78,  79
                    },
                    {
                        80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,
                        94,  95,  96,  97,  98,  99
                    },
                    {
                        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
                        114, 115, 116, 117, 118, 119
                    }
                }),
                "NdArray({{  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13," +
                _NewLine +
                "           14,  15,  16,  17,  18,  19}," + _NewLine +
                "         { 20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33," +
                _NewLine +
                "           34,  35,  36,  37,  38,  39}," + _NewLine +
                "         { 40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53," +
                _NewLine +
                "           54,  55,  56,  57,  58,  59}," + _NewLine +
                "         { 60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73," +
                _NewLine +
                "           74,  75,  76,  77,  78,  79}," + _NewLine +
                "         { 80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93," +
                _NewLine +
                "           94,  95,  96,  97,  98,  99}," + _NewLine +
                "         {100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113," +
                _NewLine +
                "          114, 115, 116, 117, 118, 119}})"
            };
            yield return new object[]
            {
                NdArray.Zeros<int>(new int[] { 30, 30 }),
                "NdArray({{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         ...," + _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}," +
                _NewLine +
                "         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}})"
            };
        }


        [Theory]
        [MemberData(nameof(TestBasicArgs))]
        public void Basic(NdArray<int> array, string expected)
        {
            var actual = array.ToString();
            Assert.Equal(expected, actual);
        }


        public static IEnumerable<object[]> TestElementFormatArgs()
        {
            yield return new object[]
            {
                NdArray.Create(new[] { 0, 1, 2, 3 }),
                "NdArray({0000, 0001, 0002, 0003})"
            };
            yield return new object[]
            {
                NdArray.Create(new[,] { { 0, 1, 2, 3 }, { 4, 5, 6, 7 }, { 8, 9, 10, 11 } }),
                "NdArray({{0000, 0001, 0002, 0003}," + _NewLine +
                "         {0004, 0005, 0006, 0007}," + _NewLine +
                "         {0008, 0009, 0010, 0011}})"
            };
            yield return new object[]
            {
                NdArray.Create(new[,]
                {
                    {
                        0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,
                        15,  16,  17,  18,  19
                    },
                    {
                        20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,
                        34,  35,  36,  37,  38,  39
                    },
                    {
                        40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,
                        54,  55,  56,  57,  58,  59
                    },
                    {
                        60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,
                        74,  75,  76,  77,  78,  79
                    },
                    {
                        80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,
                        94,  95,  96,  97,  98,  99
                    },
                    {
                        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
                        114, 115, 116, 117, 118, 119
                    }
                }),
                "NdArray({{0000, 0001, 0002, 0003, 0004, 0005, 0006, 0007, 0008, 0009, 0010," +
                _NewLine +
                "          0011, 0012, 0013, 0014, 0015, 0016, 0017, 0018, 0019}," + _NewLine +
                "         {0020, 0021, 0022, 0023, 0024, 0025, 0026, 0027, 0028, 0029, 0030," +
                _NewLine +
                "          0031, 0032, 0033, 0034, 0035, 0036, 0037, 0038, 0039}," + _NewLine +
                "         {0040, 0041, 0042, 0043, 0044, 0045, 0046, 0047, 0048, 0049, 0050," +
                _NewLine +
                "          0051, 0052, 0053, 0054, 0055, 0056, 0057, 0058, 0059}," + _NewLine +
                "         {0060, 0061, 0062, 0063, 0064, 0065, 0066, 0067, 0068, 0069, 0070," +
                _NewLine +
                "          0071, 0072, 0073, 0074, 0075, 0076, 0077, 0078, 0079}," + _NewLine +
                "         {0080, 0081, 0082, 0083, 0084, 0085, 0086, 0087, 0088, 0089, 0090," +
                _NewLine +
                "          0091, 0092, 0093, 0094, 0095, 0096, 0097, 0098, 0099}," + _NewLine +
                "         {0100, 0101, 0102, 0103, 0104, 0105, 0106, 0107, 0108, 0109, 0110," +
                _NewLine +
                "          0111, 0112, 0113, 0114, 0115, 0116, 0117, 0118, 0119}})"
            };
            yield return new object[]
            {
                NdArray.Zeros<int>(new int[] { 30, 30 }),
                "NdArray({{0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         ...," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}," + _NewLine +
                "         {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, ..., 0000," +
                _NewLine +
                "          0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000}})"
            };
        }


        [Theory]
        [MemberData(nameof(TestElementFormatArgs))]
        public void ElementFormat(NdArray<int> array, string expected)
        {
            var actual = array.ToString("E(0000)");
            Assert.Equal(expected, actual);
        }


        public static IEnumerable<object[]> TestShapeArgs()
        {
            yield return new object[] { NdArray.Zeros<int>(new[] { 4 }), "Shape=(4,)," };
            yield return new object[] { NdArray.Zeros<int>(new[] { 8, 8 }), "Shape=(8, 8,)," };
            yield return new object[]
                { NdArray.Zeros<int>(new[] { 2, 3, 4, 5 }), "Shape=(2, 3, 4, 5,)," };
        }


        [Theory]
        [MemberData(nameof(TestShapeArgs))]
        public void Shape(NdArray<int> array, string expSubstr)
        {
            Assert.Contains(expSubstr, array.ToString("S"));
        }


        [Fact]
        public void Type()
        {
            void core<T>(NdArray<T> array, string expSubstr)
                => Assert.Contains(expSubstr, array.ToString("T"));

            core(NdArray.Zeros<int>(new[] { 4 }), "Type=Int32,");
            core(NdArray.Zeros<float>(new[] { 8, 8 }), "Type=Single,");
            core(NdArray.Zeros<double>(new[] { 2, 3, 4, 5 }), "Type=Double,");
        }


        [Fact]
        public void Limit()
        {
            void core(int[] shape, string format, string expected)
            {
                var actual = NdArray.Zeros<int>(shape).ToString(format);
                Assert.Equal(expected, actual);
            }

            core(new[] { 4 }, "L(3)", "NdArray({0, 0, ..., 0})");
            core(new[] { 4 }, "L(4)", "NdArray({0, 0, 0, 0})");
            core(new[] { 4 }, "L(*)", "NdArray({0, 0, 0, 0})");
            core(new[] { 4 }, "L(3,)", "NdArray({0, 0, ..., 0})");
            core(new[] { 4 }, "L(4,)", "NdArray({0, 0, 0, 0})");
            core(new[] { 4 }, "L(*,)", "NdArray({0, 0, 0, 0})");

            core(new[] { 5 }, "L(4)", "NdArray({0, 0, ..., 0, 0})");
            core(new[] { 5 }, "L(5)", "NdArray({0, 0, 0, 0, 0})");
            core(new[] { 5 }, "L(*)", "NdArray({0, 0, 0, 0, 0})");
            core(new[] { 5 }, "L(4,)", "NdArray({0, 0, ..., 0, 0})");
            core(new[] { 5 }, "L(5,)", "NdArray({0, 0, 0, 0, 0})");
            core(new[] { 5 }, "L(*,)", "NdArray({0, 0, 0, 0, 0})");

            core(new[] { 4, 4 }, "L(3)", "NdArray({{0, 0, 0, 0}," + _NewLine +
                                         "         {0, 0, 0, 0}," + _NewLine +
                                         "         ...,"          + _NewLine +
                                         "         {0, 0, 0, 0}})");
            core(new[] { 4, 4 }, "L(3,)", "NdArray({{0, 0, 0, 0}," + _NewLine +
                                          "         {0, 0, 0, 0}," + _NewLine +
                                          "         ...,"          + _NewLine +
                                          "         {0, 0, 0, 0}})");
            core(new[] { 4, 4 }, "L(3, 3)", "NdArray({{0, 0, ..., 0}," + _NewLine +
                                            "         {0, 0, ..., 0}," + _NewLine +
                                            "         ...,"            + _NewLine +
                                            "         {0, 0, ..., 0}})");
            core(new[] { 4, 4 }, "L(*, 3)", "NdArray({{0, 0, ..., 0}," + _NewLine +
                                            "         {0, 0, ..., 0}," + _NewLine +
                                            "         {0, 0, ..., 0}," + _NewLine +
                                            "         {0, 0, ..., 0}})");

            core(new[] { 5, 5 }, "L(4)", "NdArray({{0, 0, 0, 0, 0}," + _NewLine +
                                         "         {0, 0, 0, 0, 0}," + _NewLine +
                                         "         ...,"          + _NewLine +
                                         "         {0, 0, 0, 0, 0}," + _NewLine +
                                         "         {0, 0, 0, 0, 0}})");
            core(new[] { 5, 5 }, "L(4,)", "NdArray({{0, 0, 0, 0, 0}," + _NewLine +
                                          "         {0, 0, 0, 0, 0}," + _NewLine +
                                          "         ...,"          + _NewLine +
                                          "         {0, 0, 0, 0, 0}," + _NewLine +
                                          "         {0, 0, 0, 0, 0}})");
            core(new[] { 5, 5 }, "L(4, 4)", "NdArray({{0, 0, ..., 0, 0}," + _NewLine +
                                            "         {0, 0, ..., 0, 0}," + _NewLine +
                                            "         ...,"               + _NewLine +
                                            "         {0, 0, ..., 0, 0}," + _NewLine +
                                            "         {0, 0, ..., 0, 0}})");
            core(new[] { 5, 5 }, "L(*, 4)", "NdArray({{0, 0, ..., 0, 0}," + _NewLine +
                                            "         {0, 0, ..., 0, 0}," + _NewLine +
                                            "         {0, 0, ..., 0, 0}," + _NewLine +
                                            "         {0, 0, ..., 0, 0}," + _NewLine +
                                            "         {0, 0, ..., 0, 0}})");
        }


        public static IEnumerable<object[]> TestWidthArgs()
        {
            yield return new object[]
            {
                new[] { 80 }, "W(80) L(*,)",
                "NdArray({0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0," +
                _NewLine +
                "         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0," +
                _NewLine +
                "         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0," +
                _NewLine +
                "         0, 0, 0, 0, 0, 0, 0, 0})"
            };
            yield return new object[]
            {
                new[] { 80 }, "W(20) L(*,)",
                "NdArray({0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0," + _NewLine +
                "         0, 0, 0, 0})"
            };
            yield return new object[]
            {
                new[] { 4 }, "W(20) L(*,) E(00000000)",
                "NdArray({00000000," + _NewLine +
                "         00000000," + _NewLine +
                "         00000000," + _NewLine +
                "         00000000})"
            };
        }


        [Theory]
        [MemberData(nameof(TestWidthArgs))]
        public void Width(int[] shape, string format, string expected)
        {
            var actual = NdArray.Zeros<int>(shape).ToString(format);
            Assert.Equal(expected, actual);
        }

    }
}
