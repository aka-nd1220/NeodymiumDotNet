<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Numerics;
using System.Reflection;

namespace NeodymiumDotNet.Optimizations
{
    partial class SimdVisitor<T>
    {
<#
for(var i = 0; i <= 8; ++i)
{
    var srcDelegateType = "Func<" + string.Concat(Enumerable.Repeat("T, ", i)) + "T>";
    var dstDelegateType = "Func<" + string.Concat(Enumerable.Repeat("Vector<T>, ", i)) + "Vector<T>>";
#>
        /// <summary>
        ///     Visits the children of the operation expression for primitive value.
        /// </summary>
        /// <param name="func"></param>
        /// <returns></returns>
        public Expression<<#=dstDelegateType#>>
               VisitFuncLambda(Expression<<#=srcDelegateType#>> func)
            => Expression.Lambda<<#=dstDelegateType#>>(Visit(func.Body), NewArguments);


<#
}
#>
    }
}
