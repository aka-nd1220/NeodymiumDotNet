<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NeodymiumDotNet</name>
    </assembly>
    <members>
        <member name="T:NeodymiumDotNet.INdArray">
            <summary>
                Generic type independent interface of <see cref="T:NeodymiumDotNet.NdArray`1"/> and <see cref="T:NeodymiumDotNet.MutableNdArray`1"/>.
            </summary>
            <remarks>
                Do not implement this interface except <see cref="T:NeodymiumDotNet.NdArray`1"/> or <see cref="T:NeodymiumDotNet.MutableNdArray`1"/>.
            </remarks>
        </member>
        <member name="P:NeodymiumDotNet.INdArray.Rank">
            <summary>
                Gets the rank of this NdArray.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.INdArray.Shape">
            <summary>
                Gets the shape of this NdArray.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.INdArray.Length">
            <summary>
                Gets the number of all elements.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.INdArray.ToString(System.String)">
            <summary>
                [Pure] Returns a string that represents the current object.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.INdArray.ToFlattenIndex(System.ReadOnlySpan{System.Int32})">
            <summary>
                [Pure] Calculates the index of NdArray flatten sequence from the shaped indices.
            </summary>
            <param name="shapedIndices"> [<c>shapedIndices.Length == shape.Length</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.INdArray.ToShapedIndices(System.Int32)">
            <summary>
                [Pure] Calculate the shaped indices from the index of NdArray flatten sequence.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.INdArray`1">
            <summary>
                Presents readable n-dimension array.
                This type does not mention mutability / immutability.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
                Do not implement this interface except <see cref="T:NeodymiumDotNet.NdArray`1"/> or <see cref="T:NeodymiumDotNet.MutableNdArray`1"/>.
            </remarks>
        </member>
        <member name="P:NeodymiumDotNet.INdArray`1.Item(NeodymiumDotNet.Index[])">
            <summary>
                Gets the element of this NdArray.
            </summary>
            <param name="indices"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:NeodymiumDotNet.INdArray`1.Item(System.ReadOnlySpan{NeodymiumDotNet.Index})">
            <summary>
                Gets the element of this NdArray.
            </summary>
            <param name="indices"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:NeodymiumDotNet.INdArray`1.Item(NeodymiumDotNet.IndexOrRange[])">
            <summary>
                Gets the partial array.
            </summary>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.INdArray`1.GetItem(System.Int32)">
            <summary>
                [Pure] Gets value by flatten index.
            </summary>
            <param name="flattenIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.INdArray`1.ToImmutable">
            <summary>
                [Pure] Gets immutable copy of this NdArray.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.INdArray`1.ToMutable">
            <summary>
                [Pure] Gets mutable copy of this NdArray;
                Its buffer is sequential in memory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.Index">
            <summary>
                Presents an index of N-D array element.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Index.FromEnd">
            <summary>
                Gets true if this instance presents the index from tail.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Index.Value">
            <summary>
                Gets the numerical value to present the index.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Index.#ctor(System.Int32,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:NeodymiumDotNet.Index"/>.
            </summary>
            <param name="value"></param>
            <param name="fromEnd"></param>
        </member>
        <member name="M:NeodymiumDotNet.Index.Map(System.Int32)">
            <summary>
                Maps to an actual index value on an array entity.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Index.ToString">
            <summary>
                Gets the text which presents this instance value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Index.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Index.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this instance and a specified <see cref="T:System.Object"/> represent the same type and value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Index.Equals(NeodymiumDotNet.Index)">
            <summary>
                Returns a value indicating whether this instance and a specified <see cref="T:NeodymiumDotNet.Index"/> represent the same value.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Index.op_Equality(NeodymiumDotNet.Index,NeodymiumDotNet.Index)">
            <summary>
                Returns a value indicating whether two instance of <see cref="T:NeodymiumDotNet.Index"/> represent the same value.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Index.op_Inequality(NeodymiumDotNet.Index,NeodymiumDotNet.Index)">
            <summary>
                Returns a value indicating whether two instance of <see cref="T:NeodymiumDotNet.Index"/> represent the different value.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Index.op_Implicit(System.Int32)~NeodymiumDotNet.Index">
            <summary>
                Defines an explicit conversion of a <see cref="T:System.Int32"/> to <see cref="T:NeodymiumDotNet.Index"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:NeodymiumDotNet.IndexArray">
            <summary>
                Immutable array specialized to indices expression.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.IndexArray.System#Collections#Generic#IReadOnlyCollection{System#Int32}#Count">
            <summary>
                Gets the element count of this instance.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.IndexArray.Length">
            <summary>
                Gets the array length of this instance.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.IndexArray.TotalLength">
            <summary>
                Gets the total length of N-dimensional array which has a shape represented by this instance.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.IndexArray.Item(System.Int32)">
            <summary>
                Gets the index value of this instance.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.#ctor(System.ReadOnlySpan{System.Int32})">
            <summary>
                Initialize a new <see cref="T:NeodymiumDotNet.IndexArray"/> instance.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.#ctor(System.Int32[])">
            <summary>
                Gets the total length of N-dimentional array which has a shape represented by this instance.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.GetEnumerator">
            <summary>
                Returns an enumerator that iterates throught the <see cref="T:NeodymiumDotNet.IndexArray"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.System#Collections#Generic#IEnumerable{System#Int32}#GetEnumerator">
            <summary>
                Returns an enumerator that iterates throught the <see cref="T:NeodymiumDotNet.IndexArray"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates throught the <see cref="T:NeodymiumDotNet.IndexArray"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.Equals(NeodymiumDotNet.IndexArray)">
            <summary>
                Returns a value indicating whether this instance and a specified <see cref="T:NeodymiumDotNet.IndexArray"/> represent the same value.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this instance and a specified <see cref="T:System.Object"/> represent the same type and value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.ToString">
            <summary>
                Gets the text which presents this instance value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.op_Implicit(NeodymiumDotNet.IndexArray)~System.ReadOnlySpan{System.Int32}">
            <summary>
                Converts the specified <see cref="T:NeodymiumDotNet.IndexArray"/> instance to <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <param name="indices"></param>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.op_Implicit(System.Int32[])~NeodymiumDotNet.IndexArray">
            <summary>
                Converts the specified <typeref cref="T:System.Int32"/>[] instance t <see cref="T:NeodymiumDotNet.IndexArray"/>.
            </summary>
            <param name="indices"></param>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.op_Equality(NeodymiumDotNet.IndexArray,NeodymiumDotNet.IndexArray)">
            <summary>
                Returns a value indicating whether two instance of <see cref="T:NeodymiumDotNet.Index"/> represent the same value.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.op_Inequality(NeodymiumDotNet.IndexArray,NeodymiumDotNet.IndexArray)">
            <summary>
                Returns a value indicating whether two instance of <see cref="T:NeodymiumDotNet.Index"/> represent the different value.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.IndexArray.Enumerator">
            <summary>
                Enumerates the elements of a <see cref="T:NeodymiumDotNet.IndexArray"/>.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.IndexArray.Enumerator.Current">
            <summary>
                Gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.Enumerator.MoveNext">
            <summary>
                Advances the enumerator to the next element of the <see cref="T:NeodymiumDotNet.IndexArray"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.IndexArray.Enumerator.Dispose">
            <summary>
                Releases all resources used by this instance.
            </summary>
        </member>
        <member name="T:NeodymiumDotNet.IndexOrRange">
            <summary>
                Represents a union type of <see cref="P:NeodymiumDotNet.IndexOrRange.Index"/> and <see cref="P:NeodymiumDotNet.IndexOrRange.Range"/>.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.IndexOrRange.Index">
            <summary>
                Gets the <see cref="P:NeodymiumDotNet.IndexOrRange.Index"/> value if this instance has a <see cref="P:NeodymiumDotNet.IndexOrRange.Index"/>.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.IndexOrRange.Range">
            <summary>
                Gets the <see cref="P:NeodymiumDotNet.IndexOrRange.Range"/> value if this instance has a <see cref="P:NeodymiumDotNet.IndexOrRange.Range"/>.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.IndexOrRange.IsRange">
            <summary>
                Gets <c>true</c> if this instance has a <see cref="P:NeodymiumDotNet.IndexOrRange.Range"/>.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.IndexOrRange.#ctor(NeodymiumDotNet.Index)">
            <summary>
                Initializes a new instance with <see cref="P:NeodymiumDotNet.IndexOrRange.Index"/>.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:NeodymiumDotNet.IndexOrRange.#ctor(NeodymiumDotNet.Range)">
            <summary>
                Initializes a new instance with <see cref="P:NeodymiumDotNet.IndexOrRange.Range"/>.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:NeodymiumDotNet.IndexOrRange.ToString">
            <summary>
                Gets the text which presents this instance value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.IndexOrRange.op_Implicit(NeodymiumDotNet.Index)~NeodymiumDotNet.IndexOrRange">
            <summary>
                Convert the specified <see cref="P:NeodymiumDotNet.IndexOrRange.Index"/> instance to <see cref="T:NeodymiumDotNet.IndexOrRange"/>.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:NeodymiumDotNet.IndexOrRange.op_Implicit(NeodymiumDotNet.Range)~NeodymiumDotNet.IndexOrRange">
            <summary>
                Convert the specified <see cref="P:NeodymiumDotNet.IndexOrRange.Range"/> instance to <see cref="T:NeodymiumDotNet.IndexOrRange"/>.
            </summary>
            <param name="range"></param>
        </member>
        <member name="T:NeodymiumDotNet.Io.BigEndiannessBitConverter">
            <summary>
                Provides features of <see cref="T:NeodymiumDotNet.Io.IBitConverter"/> for big endianness system.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Io.BigEndiannessBitConverter.Instance">
            <summary>
                The instance of <see cref="T:NeodymiumDotNet.Io.IBitConverter"/> for big endianness system.
            </summary>
            <remarks>
                This is same with <see cref="P:NeodymiumDotNet.Io.ReverseBitConverter.Instance"/> if runtime byte order is big endianness.
            </remarks>
        </member>
        <member name="T:NeodymiumDotNet.Io.Endian">
            <summary>
                Word-to-bytes memory mapping order.
            </summary>
        </member>
        <member name="F:NeodymiumDotNet.Io.Endian.Undefined">
            <summary></summary>
        </member>
        <member name="F:NeodymiumDotNet.Io.Endian.Big">
            <summary></summary>
        </member>
        <member name="F:NeodymiumDotNet.Io.Endian.Little">
            <summary></summary>
        </member>
        <member name="T:NeodymiumDotNet.Io.IBitConverter">
            <summary>
                Represents conversion between primitive data type and byte sequence.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Io.IBitConverter.TryReadPrimitive``1(System.ReadOnlySpan{System.Byte},``0@)">
            <summary>
                Tries to read primitive value from a byte sequence.
            </summary>
            <typeparam name="TPrimitive"> A reading data type. </typeparam>
            <param name="src"> A byte sequence span. </param>
            <param name="value"> A result destination if reading was succeeded. </param>
            <returns>
                <c>true</c> if reading was succeeded;
                "false" if the length of <paramref name="src"/> is shorter than size of <typeparamref name="TPrimitive"/>.
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.Io.IBitConverter.TryReadPrimitives``1(System.ReadOnlySpan{System.Byte},System.Span{``0})">
            <summary>
                Tries to read primitive values from a byte sequence.
            </summary>
            <typeparam name="TPrimitive"> A read data type. </typeparam>
            <param name="src"> A byte sequence span. </param>
            <param name="values"> A result destination if reading was succeeded. </param>
            <returns>
                <c>true</c> if reading was succeeded;
                "false" if the length of <paramref name="src"/> is shorter than size of <paramref name="values"/>.
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.Io.IBitConverter.TryWritePrimitive``1(System.Span{System.Byte},``0@)">
            <summary>
                Tries to write primitive value to a byte sequence.
            </summary>
            <typeparam name="TPrimitive"> A writing data type. </typeparam>
            <param name="dst"> A result destination if reading was succeeded. </param>
            <param name="value"> A writing value. </param>
            <returns>
                <c>true</c> if writing was succeeded;
                "false" if the length of <paramref name="dst"/> is shorter than size of <typeparamref name="TPrimitive"/>.
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.Io.IBitConverter.TryWritePrimitives``1(System.Span{System.Byte},System.ReadOnlySpan{``0})">
            <summary>
                Tries to write primitive value to a byte sequence.
            </summary>
            <typeparam name="TPrimitive"> A writing data type. </typeparam>
            <param name="dst"> A result destination if reading was succeeded. </param>
            <param name="values"> A writing values. </param>
            <returns>
                <c>true</c> if writing was succeeded;
                "false" if the length of <paramref name="dst"/> is shorter than size of <paramref name="values"/>.
            </returns>
        </member>
        <member name="T:NeodymiumDotNet.Io.BitConverterEx">
            <summary>
                Extension methods for <see cref="T:NeodymiumDotNet.Io.IBitConverter"/>.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Io.BitConverterEx.ReadPrimitive``1(NeodymiumDotNet.Io.IBitConverter,System.ReadOnlySpan{System.Byte})">
            <summary>
                Reads a primitive value from a byte sequence.
            </summary>
            <typeparam name="TPrimitive"></typeparam>
            <param name="converter"></param>
            <param name="src"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
                Too short <paramref name="src"/>.
            </exception>
        </member>
        <member name="M:NeodymiumDotNet.Io.BitConverterEx.WritePrimitive``1(NeodymiumDotNet.Io.IBitConverter,System.Span{System.Byte},``0)">
            <summary>
                Writes a primitive value to a byte sequence.
            </summary>
            <typeparam name="TPrimitive"></typeparam>
            <param name="converter"></param>
            <param name="dst"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentException">
                Too short <paramref name="dst"/>.
            </exception>
        </member>
        <member name="T:NeodymiumDotNet.Io.LittleEndiannessBitConverter">
            <summary>
                Provides features of <see cref="T:NeodymiumDotNet.Io.IBitConverter"/> for little endianness system.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Io.LittleEndiannessBitConverter.Instance">
            <summary>
                The instance of <see cref="T:NeodymiumDotNet.Io.IBitConverter"/> for little endianness system.
            </summary>
            <remarks>
                This is same with <see cref="P:NeodymiumDotNet.Io.NormalBitConverter.Instance"/> if runtime byte order is little endianness.
            </remarks>
        </member>
        <member name="T:NeodymiumDotNet.Io.NormalBitConverter">
            <summary>
                Provides features of <see cref="T:NeodymiumDotNet.Io.IBitConverter"/> which reads/writes byte sequence naturally.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Io.NormalBitConverter.Instance">
            <summary>
                The instance of <see cref="T:NeodymiumDotNet.Io.NormalBitConverter"/>.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Io.NormalBitConverter.TryReadPrimitive``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.Io.NormalBitConverter.TryReadPrimitives``1(System.ReadOnlySpan{System.Byte},System.Span{``0})">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.Io.NormalBitConverter.TryWritePrimitive``1(System.Span{System.Byte},``0@)">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.Io.NormalBitConverter.TryWritePrimitives``1(System.Span{System.Byte},System.ReadOnlySpan{``0})">
            <inheritdoc />
        </member>
        <member name="T:NeodymiumDotNet.Io.ReverseBitConverter">
            <summary>
                Provides features of <see cref="T:NeodymiumDotNet.Io.IBitConverter"/> which reads/writes byte sequence with reversing.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Io.ReverseBitConverter.Instance">
            <summary>
                The instance of <see cref="T:NeodymiumDotNet.Io.ReverseBitConverter"/>.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Io.ReverseBitConverter.TryReadPrimitive``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.Io.ReverseBitConverter.TryReadPrimitives``1(System.ReadOnlySpan{System.Byte},System.Span{``0})">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.Io.ReverseBitConverter.TryWritePrimitive``1(System.Span{System.Byte},``0@)">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.Io.ReverseBitConverter.TryWritePrimitives``1(System.Span{System.Byte},System.ReadOnlySpan{``0})">
            <inheritdoc />
        </member>
        <member name="T:NeodymiumDotNet.IIterationStrategy">
            <summary>
                Represents a evaluation strategy of iteration.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.IIterationStrategy.For(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
                Executes a for loop in which iterations may run in the strategy.
            </summary>
            <param name="fromInclusive"></param>
            <param name="toExclusive"></param>
            <param name="body"></param>
        </member>
        <member name="T:NeodymiumDotNet.IterationStrategy">
            <summary>
                Provides default implementation of <see cref="T:NeodymiumDotNet.IIterationStrategy"/>.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.IterationStrategy.Default">
            <summary>
                Gets default iteration strategy.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.IterationStrategy.For(System.Int32,System.Int32,System.Action{System.Int32})">
            <inheritdoc />
        </member>
        <member name="T:NeodymiumDotNet.LinearAlgebra.NdLinAlg">
            <summary>
                Provides linear algebra functions for <see cref="T:NeodymiumDotNet.NdArray`1"/>.
                These calculations evaluates result eagerly.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.Cross``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.INdArray{``0})">
            <summary>
                Evaluates cross operation of 3-dim vector lazily.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.LinearAlgebra.NdLinAlg.Cache`1">
            <summary>
                Static type cache base.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.Determinant``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                Calculates a matrix determinant.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.Dot``1(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0})">
            <summary>
                Evaluates dot operation of vector/matrix lazily.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"> [<c>x.Rank == 1 || x.Rank == 2</c>] </param>
            <param name="y"> [<c>y.Rank == 1 || y.Rank == 2</c>] </param>
            <returns>
                <para> The result of dot operation of <paramref name="x"/> and <paramref name="y"/>. </para>
                <para> - If <c>x.Shape == {p} &amp;&amp; y.Rank == {p}</c>, then <c>$ReturnValue.Shape == {1}</c>. </para>
                <para> - If <c>x.Shape == {p} &amp;&amp; y.Shape == {p, n}</c>, then <c>$ReturnValue.Shape == {n}</c>. </para>
                <para> - If <c>x.Shape == {m, p} &amp;&amp; y.Shape == {p}</c>, then <c>$ReturnValue.Shape == {m}</c>. </para>
                <para> - If <c>x.Shape == {m, p} &amp;&amp; y.Shape == {p, n}</c>, then <c>$ReturnValue.Shape == {m, n}</c>. </para>
                <para> - If the shape patterns does not match with above patterns, throw <see cref="T:NeodymiumDotNet.ShapeMismatchException"/>. </para>
            </returns>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.DotLegacy``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.INdArray{``0})">
            <summary>
                [Legacy] Evaluates dot operation of vector/matrix lazily.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"> [<c>x.Rank == 1 || x.Rank == 2</c>] </param>
            <param name="y"> [<c>y.Rank == 1 || y.Rank == 2</c>] </param>
            <returns>
                <para> The result of dot operation of <paramref name="x"/> and <paramref name="y"/>. </para>
                <para> - If <c>x.Shape == {p} &amp;&amp; y.Rank == {p}</c>, then <c>$ReturnValue.Shape == {1}</c>. </para>
                <para> - If <c>x.Shape == {p} &amp;&amp; y.Shape == {p, n}</c>, then <c>$ReturnValue.Shape == {n}</c>. </para>
                <para> - If <c>x.Shape == {m, p} &amp;&amp; y.Shape == {p}</c>, then <c>$ReturnValue.Shape == {m}</c>. </para>
                <para> - If <c>x.Shape == {m, p} &amp;&amp; y.Shape == {p, n}</c>, then <c>$ReturnValue.Shape == {m, n}</c>. </para>
                <para> - If the shape patterns does not match with above patterns, throw <see cref="T:NeodymiumDotNet.ShapeMismatchException"/>. </para>
            </returns>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.Identity``1(System.Int32)">
            <summary>
                Gets the identity matrix which has the specified dimension.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.Inverse``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                Calculates inverse matrix.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.LU``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                <para>Calculates matrix LU decomposition.</para>
                <para>If <paramref name="ndArray"/> cannot decompose to LU, the return values are <c>null</c>.</para>
                <para><c>ndArray == l.dot(u)</c></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.LUP``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                <para>Calculates matrix LUP decomposition.</para>
                <para><c>ndArray == p.Dot(l).dot(u)</c></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <param name="strategy"></param>
            <returns></returns>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.LUWithPermutations``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                <para>Calculates matrix LU decomposition with permutation set.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.ProgressLURecurrence``1(NeodymiumDotNet.RawNdArrayImpl{``0},System.Int32,NeodymiumDotNet.IIterationStrategy)">
            <summary>
                Updates the step variable for outer-product form gaussian elimination.
                This method modifies <paramref name="a"/> destructively.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="k"></param>
            <param name="strategy"></param>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.SplitLU``1(NeodymiumDotNet.MutableNdArray{``0},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                Splits LU composite matrix.
                This method modifies <paramref name="a"/> destructively.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.LULegacy``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                <para>Calculates matrix LU decomposition.</para>
                <para>If <paramref name="ndArray"/> cannot decompose to LU, the return values are <c>null</c>.</para>
                <para><c>ndArray == l.dot(u)</c></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.LUPLegacy``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                <para>Calculates matrix LUP decomposition.</para>
                <para><c>ndArray == p.Dot(l).dot(u)</c></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <param name="strategy"></param>
            <returns></returns>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.LUWithPermutationsLegacy``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                <para>Calculates matrix LU decomposition with permutation set.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.ProgressLURecurrenceLegacy``1(NeodymiumDotNet.MutableNdArray{``0},System.Int32,NeodymiumDotNet.IIterationStrategy)">
            <summary>
                Updates the step variable for outer-product form gaussian elimination.
                This method modifies <paramref name="a"/> destructively.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="k"></param>
            <param name="strategy"></param>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.SplitLULegacy``1(NeodymiumDotNet.MutableNdArray{``0},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                Splits LU composite matrix.
                This method modifies <paramref name="a"/> destructively.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.Norm1``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                [Pure] Returns the 1-D norm of all elements of <paramref name="ndArray"/>.
                This is same with <see cref="M:NeodymiumDotNet.Statistics.NdStatistics.Sum``1(NeodymiumDotNet.INdArray{``0})"/>.
            </summary>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.Norm2``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                [Pure] Returns the 2-D norm of all elements of <paramref name="ndArray"/>.
            </summary>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.NormInf``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                [Pure] Returns the Infinity-D norm of all elements of <paramref name="ndArray"/>.
                This is same with <see cref="M:NeodymiumDotNet.Statistics.NdStatistics.Max``1(NeodymiumDotNet.INdArray{``0})"/>.
            </summary>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.ToPermutationMatrixFromSet``1(System.Int32,System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
                Gets the permutation matrix from permutation set.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="n"></param>
            <param name="permutations"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.LinearAlgebra.NdLinAlg.Solve``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.INdArray{``0})">
            <summary>
                Solves simultaneous linear equations.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"> [<c>a.Rank == 2 &amp;&amp; a.Shape[0] == a.Shape[1]</c>] </param>
            <param name="b"> [<c>(b.Rank == 1 || b.Rank == 2) &amp;&amp; b.Shape[0] == a.Shape[0]</c>] </param>
            <returns></returns>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException">
                <para> When <c>n := a.Shape[0]</c>, </para>
                <para> - If <c>b.Shape == {n}</c>, then <c>$ReturnValue.Shape == {n}</c>. </para>
                <para>
                    - If <c>b.Shape == {n, p}</c>, then <c>$ReturnValue.Shape == {n, p}</c>.
                    Each column of return value is the solution against corresponding column of b.
                </para>
            </exception>
        </member>
        <member name="T:NeodymiumDotNet.Linq.NdLinq">
            <summary>
                LINQ style chainable operations.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Select``2(NeodymiumDotNet.NdArray{``0},System.Func{``0,``1})">
            <summary>
                [Pure] Projects each element of a NdArray into a new form.
            </summary>
            <typeparam name="TSource"> The type of the elements of <paramref name="ndarray"/>. </typeparam>
            <typeparam name="TResult"> The type of the value returned by <paramref name="selector"/>. </typeparam>
            <param name="ndarray"> A NdArray for values to invoke a transform function on. </param>
            <param name="selector"> A transform function to apply to each element. </param>
            <returns> [<c>$ReturnValue.Shape == NdArray.Shape</c>] </returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Select``2(NeodymiumDotNet.NdArray{``0},System.Func{``0,``1},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                [Pure] Projects each element of a NdArray into a new form.
            </summary>
            <typeparam name="TSource"> The type of the elements of <paramref name="ndarray"/>. </typeparam>
            <typeparam name="TResult"> The type of the value returned by <paramref name="selector"/>. </typeparam>
            <param name="ndarray"> A NdArray for values to invoke a transform function on. </param>
            <param name="selector"> A transform function to apply to each element. </param>
            <param name="strategy">
                [nullable] A strategy object to iterate calculation for each element.
                <c>null</c> means to use <see cref="P:NeodymiumDotNet.IterationStrategy.Default"/>.
            </param>
            <returns> [<c>$ReturnValue.Shape == NdArray.Shape</c>] </returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Select``2(NeodymiumDotNet.NdArray{``0},System.ReadOnlySpan{System.Int32},System.Func{NeodymiumDotNet.NdArray{``0},``1})">
            <summary>
                [Pure] Projects each partial NdArray of the specified NdArray into a new form.
            </summary>
            <typeparam name="TSource"> The type of the elements of <paramref name="ndarray"/>. </typeparam>
            <typeparam name="TResult"> The type of the value returned by <paramref name="selector"/>. </typeparam>
            <param name="ndarray"> A NdArray for values to invoke a transform function on. </param>
            <param name="projectionAxes"> The axes to enumerate partial NdArray. </param>
            <param name="selector"> A transform function to apply to each partial NdArray. </param>
            <returns>  </returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Select``2(NeodymiumDotNet.NdArray{``0},System.ReadOnlySpan{System.Int32},System.Func{NeodymiumDotNet.NdArray{``0},``1},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                [Pure] Projects each partial NdArray of the specified NdArray into a new form.
            </summary>
            <typeparam name="TSource"> The type of the elements of <paramref name="ndarray"/>. </typeparam>
            <typeparam name="TResult"> The type of the value returned by <paramref name="selector"/>. </typeparam>
            <param name="ndarray"> A NdArray for values to invoke a transform function on. </param>
            <param name="projectionAxes"> The axes to enumerate partial NdArray. </param>
            <param name="selector"> A transform function to apply to each partial NdArray. </param>
            <param name="strategy">
                [nullable] A strategy object to iterate calculation for each element.
                <c>null</c> means to use <see cref="P:NeodymiumDotNet.IterationStrategy.Default"/>.
            </param>
            <returns>  </returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Where``1(NeodymiumDotNet.NdArray{``0},System.Int32,System.Func{NeodymiumDotNet.NdArray{``0},System.Boolean})">
            <summary>
                [Pure] Filter  partial NdArray.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndarray"> [NonNull] </param>
            <param name="filterAxis"></param>
            <param name="predicate"> [NonNull] </param>
            <returns> [NonNull] </returns>
        </member>
        <member name="T:NeodymiumDotNet.Linq.NdLinq.WhereNdArrayImpl`1">
            <summary>
                Linq NdArray implementation with <c>Where</c> operation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``2(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1})">
            <summary>
                [Pure] Zip elements of several NdArrays to tuple.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.ZipInTupleArrayImpl`2.#ctor(NeodymiumDotNet.NdArrayImpl{`0},NeodymiumDotNet.NdArrayImpl{`1})">
            <summary>
            
            </summary>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``3(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},System.Func{``0,``1,``2})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``3(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},System.Func{``0,``1,``2},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="selector"></param>
            <param name="strategy">
                [nullable] A strategy object to iterate calculation for each element.
                <c>null</c> means to use <see cref="P:NeodymiumDotNet.IterationStrategy.Default"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``3(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1}},System.Func{``0,``1,``2})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``3(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1}},System.Func{``0,``1,``2},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <param name="strategy">
                [nullable] A strategy object to iterate calculation for each element.
                <c>null</c> means to use <see cref="P:NeodymiumDotNet.IterationStrategy.Default"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``3(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2})">
            <summary>
                [Pure] Zip elements of several NdArrays to tuple.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.ZipInTupleArrayImpl`3.#ctor(NeodymiumDotNet.NdArrayImpl{`0},NeodymiumDotNet.NdArrayImpl{`1},NeodymiumDotNet.NdArrayImpl{`2})">
            <summary>
            
            </summary>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``4(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},System.Func{``0,``1,``2,``3})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``4(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},System.Func{``0,``1,``2,``3},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="selector"></param>
            <param name="strategy">
                [nullable] A strategy object to iterate calculation for each element.
                <c>null</c> means to use <see cref="P:NeodymiumDotNet.IterationStrategy.Default"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``4(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2}},System.Func{``0,``1,``2,``3})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``4(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2}},System.Func{``0,``1,``2,``3},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <param name="strategy">
                [nullable] A strategy object to iterate calculation for each element.
                <c>null</c> means to use <see cref="P:NeodymiumDotNet.IterationStrategy.Default"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``4(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3})">
            <summary>
                [Pure] Zip elements of several NdArrays to tuple.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.ZipInTupleArrayImpl`4.#ctor(NeodymiumDotNet.NdArrayImpl{`0},NeodymiumDotNet.NdArrayImpl{`1},NeodymiumDotNet.NdArrayImpl{`2},NeodymiumDotNet.NdArrayImpl{`3})">
            <summary>
            
            </summary>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``5(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``5(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},System.Func{``0,``1,``2,``3,``4},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="selector"></param>
            <param name="strategy">
                [nullable] A strategy object to iterate calculation for each element.
                <c>null</c> means to use <see cref="P:NeodymiumDotNet.IterationStrategy.Default"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``5(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item4.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``5(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3}},System.Func{``0,``1,``2,``3,``4},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item4.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <param name="strategy">
                [nullable] A strategy object to iterate calculation for each element.
                <c>null</c> means to use <see cref="P:NeodymiumDotNet.IterationStrategy.Default"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``5(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4})">
            <summary>
                [Pure] Zip elements of several NdArrays to tuple.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.ZipInTupleArrayImpl`5.#ctor(NeodymiumDotNet.NdArrayImpl{`0},NeodymiumDotNet.NdArrayImpl{`1},NeodymiumDotNet.NdArrayImpl{`2},NeodymiumDotNet.NdArrayImpl{`3},NeodymiumDotNet.NdArrayImpl{`4})">
            <summary>
            
            </summary>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``6(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``6(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4},System.Func{``0,``1,``2,``3,``4,``5},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
            <param name="selector"></param>
            <param name="strategy">
                [nullable] A strategy object to iterate calculation for each element.
                <c>null</c> means to use <see cref="P:NeodymiumDotNet.IterationStrategy.Default"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``6(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item4.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item5.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``6(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4}},System.Func{``0,``1,``2,``3,``4,``5},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item4.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item5.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <param name="strategy">
                [nullable] A strategy object to iterate calculation for each element.
                <c>null</c> means to use <see cref="P:NeodymiumDotNet.IterationStrategy.Default"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``6(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4},NeodymiumDotNet.NdArray{``5})">
            <summary>
                [Pure] Zip elements of several NdArrays to tuple.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
            <param name="ndarray6"> [<c>ndarray1.Shape == ndarray6.Shape</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.ZipInTupleArrayImpl`6.#ctor(NeodymiumDotNet.NdArrayImpl{`0},NeodymiumDotNet.NdArrayImpl{`1},NeodymiumDotNet.NdArrayImpl{`2},NeodymiumDotNet.NdArrayImpl{`3},NeodymiumDotNet.NdArrayImpl{`4},NeodymiumDotNet.NdArrayImpl{`5})">
            <summary>
            
            </summary>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
            <param name="ndarray6"> [<c>ndarray1.Shape == ndarray6.Shape</c>] </param>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``7(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4},NeodymiumDotNet.NdArray{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
            <param name="ndarray6"> [<c>ndarray1.Shape == ndarray6.Shape</c>] </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``7(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4},NeodymiumDotNet.NdArray{``5},System.Func{``0,``1,``2,``3,``4,``5,``6},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
            <param name="ndarray6"> [<c>ndarray1.Shape == ndarray6.Shape</c>] </param>
            <param name="selector"></param>
            <param name="strategy">
                [nullable] A strategy object to iterate calculation for each element.
                <c>null</c> means to use <see cref="P:NeodymiumDotNet.IterationStrategy.Default"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``7(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4},NeodymiumDotNet.NdArray{``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item4.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item5.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item6.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``7(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4},NeodymiumDotNet.NdArray{``5}},System.Func{``0,``1,``2,``3,``4,``5,``6},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item4.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item5.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item6.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <param name="strategy">
                [nullable] A strategy object to iterate calculation for each element.
                <c>null</c> means to use <see cref="P:NeodymiumDotNet.IterationStrategy.Default"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``7(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4},NeodymiumDotNet.NdArray{``5},NeodymiumDotNet.NdArray{``6})">
            <summary>
                [Pure] Zip elements of several NdArrays to tuple.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
            <param name="ndarray6"> [<c>ndarray1.Shape == ndarray6.Shape</c>] </param>
            <param name="ndarray7"> [<c>ndarray1.Shape == ndarray7.Shape</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.ZipInTupleArrayImpl`7.#ctor(NeodymiumDotNet.NdArrayImpl{`0},NeodymiumDotNet.NdArrayImpl{`1},NeodymiumDotNet.NdArrayImpl{`2},NeodymiumDotNet.NdArrayImpl{`3},NeodymiumDotNet.NdArrayImpl{`4},NeodymiumDotNet.NdArrayImpl{`5},NeodymiumDotNet.NdArrayImpl{`6})">
            <summary>
            
            </summary>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
            <param name="ndarray6"> [<c>ndarray1.Shape == ndarray6.Shape</c>] </param>
            <param name="ndarray7"> [<c>ndarray1.Shape == ndarray7.Shape</c>] </param>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``8(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4},NeodymiumDotNet.NdArray{``5},NeodymiumDotNet.NdArray{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
            <param name="ndarray6"> [<c>ndarray1.Shape == ndarray6.Shape</c>] </param>
            <param name="ndarray7"> [<c>ndarray1.Shape == ndarray7.Shape</c>] </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``8(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4},NeodymiumDotNet.NdArray{``5},NeodymiumDotNet.NdArray{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
            <param name="ndarray6"> [<c>ndarray1.Shape == ndarray6.Shape</c>] </param>
            <param name="ndarray7"> [<c>ndarray1.Shape == ndarray7.Shape</c>] </param>
            <param name="selector"></param>
            <param name="strategy">
                [nullable] A strategy object to iterate calculation for each element.
                <c>null</c> means to use <see cref="P:NeodymiumDotNet.IterationStrategy.Default"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``8(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4},NeodymiumDotNet.NdArray{``5},NeodymiumDotNet.NdArray{``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item4.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item5.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item6.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item7.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Linq.NdLinq.Zip``8(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``1},NeodymiumDotNet.NdArray{``2},NeodymiumDotNet.NdArray{``3},NeodymiumDotNet.NdArray{``4},NeodymiumDotNet.NdArray{``5},NeodymiumDotNet.NdArray{``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7},NeodymiumDotNet.IIterationStrategy)">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item4.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item5.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item6.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item7.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <param name="strategy">
                [nullable] A strategy object to iterate calculation for each element.
                <c>null</c> means to use <see cref="P:NeodymiumDotNet.IterationStrategy.Default"/>.
            </param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.MutableNdArray`1">
            <summary>
                Mutable multi-dim NdArray.
                This type is not compatible with <see cref="T:NeodymiumDotNet.NdArray`1"/>.
                Use <see cref="M:NeodymiumDotNet.MutableNdArray`1.ToImmutable"/> or <see cref="M:NeodymiumDotNet.MutableNdArray`1.MoveToImmutable"/> to get immutable NdArray from this.
            </summary>
            <typeparam name="T"> The data type. </typeparam>
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArray`1.Entity">
            <summary>
                The NdArray elements entity.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArray`1.IsAlive">
            <summary>
                <c>true</c> if this instance is in available status; otherwise false.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArray`1.Rank">
            <summary>
                The rank of this NdArray.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArray`1.Shape">
            <summary>
                The shape of this NdArray.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArray`1.Length">
            <summary>
                The number of all elements.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArray`1.Item(System.Int32[])">
            <summary>
                The indexer of this NdArray.
            </summary>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArray`1.NeodymiumDotNet#INdArray{T}#Item(NeodymiumDotNet.Index[])">
            <inheritdoc />
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArray`1.Item(System.ReadOnlySpan{NeodymiumDotNet.Index})">
            <summary>
                The indexer of this NdArray.
            </summary>
            <param name="indices"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArray`1.NeodymiumDotNet#INdArray{T}#Item(System.ReadOnlySpan{NeodymiumDotNet.Index})">
            <inheritdoc />
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArray`1.Item(NeodymiumDotNet.IndexOrRange[])">
            <summary>
                The indexer of this NdArray.
            </summary>
            <param name="indices"> [<c>indices.Length &lt;= Rank</c>] </param>
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArray`1.NeodymiumDotNet#INdArray{T}#Item(NeodymiumDotNet.IndexOrRange[])">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.#ctor(NeodymiumDotNet.MutableNdArrayImpl{`0})">
            <summary>
                Creates new NdArray object with entity object.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.#ctor(NeodymiumDotNet.IndexArray)">
            <summary>
                Creates new NdArray object with values and shapes.
            </summary>
            <param name="shape"> [<c>shape.Product() == array.Length</c>] </param>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.#ctor(System.Array)">
            <summary>
                Creates new NdArray object.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.GetItem(System.Int32)">
            <inheritdoc />
            <summary>
                Gets value by flatten index.
            </summary>
            <param name="flattenIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.SetItem(System.Int32,`0)">
            <summary>
                Sets value by flatten index.
            </summary>
            <param name="flattenIndex"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.ToMutable">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.ToImmutable">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.MoveToImmutable">
            <summary>
                Moves NdArray entity to new immutable NdArray.
            </summary>
            <remarks> This method will destroy this NdArray instance. </remarks>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.ToFlattenIndex(System.ReadOnlySpan{System.Int32})">
            <summary>
                [Pure] Calculate the index of NdArray flatten sequence from the shaped indices.
            </summary>
            <param name="shapedIndices"> [<c>shapedIndices.Length == shape.Length</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.ToShapedIndices(System.Int32)">
            <summary>
                [Pure] Calculate the shaped indices from the index of NdArray flatten sequence.
            </summary>
            <param name="flattenIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.ToString">
            <summary>
                Returns a string that represents this <see cref="T:NeodymiumDotNet.NdArray`1"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.ToString(System.String)">
            <summary>
                Returns a string that represents this <see cref="T:NeodymiumDotNet.NdArray`1"/> instance.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.ToString(System.String,System.IFormatProvider)">
            <summary>
                Returns a string that represents this <see cref="T:NeodymiumDotNet.NdArray`1"/> instance.
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the <see cref="T:NeodymiumDotNet.NdArray`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.AsEnumerable">
            <summary>
                [Pure] Gets enumerable object of this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.AsEnumerable(System.Int32)">
            <summary>
                [Pure] Gets enumerable object of this.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.MutableNdArray`1.Enumerator">
            <summary>
                Provides an enumerator for the element of a <see cref="T:NeodymiumDotNet.MutableNdArray`1"/>.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArray`1.Enumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArray`1.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.Enumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.Enumerator.Reset">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArray`1.Enumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NeodymiumDotNet.NdArray">
            <summary>
                Provides operators for <see cref="T:NeodymiumDotNet.NdArray`1"/>.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Create``1(``0[],NeodymiumDotNet.IndexArray)">
            <summary>
                Creates immutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has any shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="shape"> [<c>array.Length == shape.TotalLength</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Create``1(``0[])">
            <summary>
                Creates immutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has 1-rank shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Create``1(``0[0:,0:])">
            <summary>
                Creates immutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has 2-rank shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Create``1(``0[0:,0:,0:])">
            <summary>
                Creates immutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has 3-rank shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Create``1(``0[0:,0:,0:,0:])">
            <summary>
                Creates immutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has 4-rank shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Create``1(``0[0:,0:,0:,0:,0:])">
            <summary>
                Creates immutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has 5-rank shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Create``1(``0[0:,0:,0:,0:,0:,0:])">
            <summary>
                Creates immutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has 6-rank shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Create``1(``0[0:,0:,0:,0:,0:,0:,0:,0:])">
            <summary>
                Creates immutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has 7-rank shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.CreateMutable``1(NeodymiumDotNet.IndexArray)">
            <summary>
                Creates mutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has any shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="shape"> [<c>array.Length == shape.TotalLength</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.CreateMutable``1(``0[],NeodymiumDotNet.IndexArray)">
            <summary>
                Creates mutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has any shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="shape"> [<c>array.Length == shape.TotalLength</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.CreateMutable``1(``0[])">
            <summary>
                Creates mutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has 1-rank shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.CreateMutable``1(``0[0:,0:])">
            <summary>
                Creates mutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has 2-rank shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.CreateMutable``1(``0[0:,0:,0:])">
            <summary>
                Creates mutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has 3-rank shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.CreateMutable``1(``0[0:,0:,0:,0:])">
            <summary>
                Creates mutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has 4-rank shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.CreateMutable``1(``0[0:,0:,0:,0:,0:])">
            <summary>
                Creates mutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has 5-rank shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.CreateMutable``1(``0[0:,0:,0:,0:,0:,0:])">
            <summary>
                Creates mutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has 6-rank shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.CreateMutable``1(``0[0:,0:,0:,0:,0:,0:,0:,0:])">
            <summary>
                Creates mutable <see cref="T:NeodymiumDotNet.NdArray`1"/> instance which has 7-rank shape.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Zeros``1(NeodymiumDotNet.IndexArray)">
            <summary>
                Creates a <see cref="T:NeodymiumDotNet.NdArray`1"/> instance whose all elements are zero.
            </summary>
            <typeparam name="T"> [Primitive] </typeparam>
            <param name="shape"></param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException"> <typeparamref name="T"/> is not primitive type. </exception>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Zeros``1(System.ReadOnlySpan{System.Int32})">
            <summary>
                Creates a <see cref="T:NeodymiumDotNet.NdArray`1"/> instance whose all elements are zero.
            </summary>
            <typeparam name="T"> [Primitive] </typeparam>
            <param name="shape"></param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException"> <typeparamref name="T"/> is not primitive type. </exception>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Zeros``1(System.Int32[])">
            <summary>
                Creates a <see cref="T:NeodymiumDotNet.NdArray`1"/> instance whose all elements are zero.
            </summary>
            <typeparam name="T"> [Primitive] </typeparam>
            <param name="shape"></param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException"> <typeparamref name="T"/> is not primitive type. </exception>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Ones``1(System.Int32[])">
            <summary>
                Creates a <see cref="T:NeodymiumDotNet.NdArray`1"/> instance whose all elements are one.
            </summary>
            <typeparam name="T"> [Primitive] </typeparam>
            <param name="shape"></param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException"> <typeparamref name="T"/> is not primitive type. </exception>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Transpose``1(NeodymiumDotNet.NdArray{``0})">
            <summary>
                Transposes the row and the column of the specified NdArray.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Transpose``1(NeodymiumDotNet.NdArray{``0},System.ReadOnlySpan{System.Int32})">
            <summary>
                Transposes the axes of the specified NdArray.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <param name="axesMap"></param>
            <returns></returns>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Transpose``1(NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Transposes the row and the column of the specified NdArray.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Transpose``1(NeodymiumDotNet.MutableNdArray{``0},System.ReadOnlySpan{System.Int32})">
            <summary>
                Transposes the axes of the specified NdArray.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <param name="axesMap"></param>
            <returns></returns>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Reshape``1(NeodymiumDotNet.NdArray{``0},System.Int32[])">
            <summary>
                [Pure] Reshapes this NdArray.
            </summary>
            <param name="ndArray"></param>
            <param name="newShape">
                [<c>
                    Length == newLen ||
                    (newShape.Count(i =&gt; i == -1) == 1 &amp;&amp; newShape.Count(i =&gt; i &lt; -1) == 0 &amp;&amp; Length % newLen == 0)
                </c>]
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.NdArray.Reshape``1(NeodymiumDotNet.MutableNdArray{``0},System.Int32[])">
            <summary>
                [Pure] Reshapes this NdArray.
            </summary>
            <param name="ndArray"></param>
            <param name="newShape">
                [<c>
                    Length == newLen ||
                  (newShape.Count(i =&gt; i == -1) == 1 &amp;&amp; newShape.Count(i =&gt; i &lt; -1) == 0 &amp;&amp; Length % newLen == 0)
                </c>]
            </param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.NdArray`1">
            <inheritdoc cref="T:NeodymiumDotNet.INdArray`1" />
            <summary>
                Immutable multi-dim NdArray.
                This type is not compatible with <see cref="T:NeodymiumDotNet.MutableNdArray`1"/>.
                Use <see cref="M:NeodymiumDotNet.NdArray`1.ToMutable"/> to get mutable NdArray from this.
            </summary>
            <typeparam name="T"> The data type. </typeparam>
        </member>
        <member name="P:NeodymiumDotNet.NdArray`1.Entity">
            <summary>
                The NdArray elements entity.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.NdArray`1.Rank">
            <summary>
                The rank of this NdArray.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.NdArray`1.Shape">
            <summary>
                The shape of this NdArray.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.NdArray`1.Length">
            <summary>
                The number of all elements.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.NdArray`1.Item(NeodymiumDotNet.Index[])">
            <summary>
                The indexer of this NdArray.
            </summary>
            <param name="indices"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:NeodymiumDotNet.NdArray`1.Item(System.ReadOnlySpan{NeodymiumDotNet.Index})">
            <summary>
                The indexer of this NdArray.
            </summary>
            <param name="indices"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:NeodymiumDotNet.NdArray`1.Item(NeodymiumDotNet.IndexOrRange[])">
            <summary>
                The indexer of this NdArray.
            </summary>
            <param name="indices"> [<c>indices.Length &lt;= Rank</c>] </param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:NeodymiumDotNet.NdArray`1.NeodymiumDotNet#INdArray{T}#Item(NeodymiumDotNet.IndexOrRange[])">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.#ctor(NeodymiumDotNet.NdArrayImpl{`0})">
            <summary>
                Create new NdArray object with entity object.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.#ctor(NeodymiumDotNet.IndexArray)">
            <summary></summary>
            <param name="shape"></param>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.#ctor(System.Array)">
            <summary>
                Create new NdArray object.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.GetItem(System.Int32)">
            <summary>
                Gets value by flatten index.
            </summary>
            <param name="flattenIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.ToMutable">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.ToImmutable">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.ToFlattenIndex(System.ReadOnlySpan{System.Int32})">
            <summary>
                [Pure] Calculate the index of NdArray flatten sequence from the shaped indices.
            </summary>
            <param name="shapedIndices"> [<c>shapedIndices.Length == shape.Length</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.ToShapedIndices(System.Int32)">
            <summary>
                [Pure] Calculate the shaped indices from the index of NdArray flatten sequence.
            </summary>
            <param name="flattenIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.Equals(System.Object)">
            <inheritdoc />
            <summary>
                Returns <c>true</c> if every element of this and <paramref name="obj"/>;
                otherwise <c>false</c>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.Equals(NeodymiumDotNet.NdArray{`0})">
            <inheritdoc />
            <summary>
                Returns <c>true</c> if every element of this and <paramref name="other"/>;
                otherwise <c>false</c>.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.GetHashCode">
            <summary>
                Gets hashcode of this NdArray.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.Equals(NeodymiumDotNet.NdArray{`0},NeodymiumDotNet.NdArray{`0})">
            <summary>
                Returns <c>true</c> if every element of <paramref name="lhs"/> and <paramref name="rhs"/>;
                otherwise <c>false</c>.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.ToString">
            <summary>
                Returns a string that represents this <see cref="T:NeodymiumDotNet.NdArray`1"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.ToString(System.String)">
            <summary>
                Returns a string that represents this <see cref="T:NeodymiumDotNet.NdArray`1"/> instance.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.ToString(System.String,System.IFormatProvider)">
            <summary>
                Returns a string that represents this <see cref="T:NeodymiumDotNet.NdArray`1"/> instance.
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the <see cref="T:NeodymiumDotNet.NdArray`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.AsEnumerable">
            <summary>
                [Pure] Gets enumerable object of this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.AsEnumerable(System.Int32)">
            <summary>
                [Pure] Gets enumerable object of this.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.NdArray`1.Enumerator">
            <summary>
                Provides an enumerator for the elements of a <see cref="T:NeodymiumDotNet.NdArray`1"/>.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.NdArray`1.Enumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:NeodymiumDotNet.NdArray`1.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.Enumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.Enumerator.Reset">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.NdArray`1.Enumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NeodymiumDotNet.NdArrayComparer`1">
            <summary>
                Represents a <see cref="T:NeodymiumDotNet.NdArray`1"/> comparison operation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:NeodymiumDotNet.NdArrayComparer`1.Default">
            <summary>
                [Pure] Gets a default comparer.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.NdArrayComparer`1.CompareElement">
            <summary>
                Gets an element comparer delegate.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
                Initializes a new instance of the <see cref="T:NeodymiumDotNet.NdArrayComparer`1"/> class.
            </summary>
            <param name="compareElement"></param>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:NeodymiumDotNet.NdArrayComparer`1"/> class.
            </summary>
            <param name="elementComparer"></param>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayComparer`1.Equals(NeodymiumDotNet.INdArray{`0},NeodymiumDotNet.INdArray{`0})">
            <summary>
                Determines whether the specified NdArrays are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayComparer`1.GetHashCode(NeodymiumDotNet.INdArray{`0})">
            <summary>
                Returns a hash code for the specified NdArray.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.NdArrayFormatter`1">
            <summary>
                Defines a method to format a <see cref="T:NeodymiumDotNet.NdArray`1"/> instance to <see cref="T:System.String"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:NeodymiumDotNet.NdArrayFormatter`1.Default">
            <summary>
                Gets a default instance of <see cref="T:NeodymiumDotNet.NdArrayFormatter`1"/>.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayFormatter`1.Format(System.String,System.Object,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.NdArrayFormatter`1.Format(System.String,NeodymiumDotNet.NdArray{`0},System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.NdArrayFormatter`1.Format(System.String,NeodymiumDotNet.MutableNdArray{`0},System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="T:NeodymiumDotNet.NdMath">
            <summary>
                Provides generalized mathematical functions.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Abs(System.SByte)">
            <summary>
                Returns the absolute value of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Abs(System.Int16)">
            <summary>
                Returns the absolute value of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Abs(System.Int32)">
            <summary>
                Returns the absolute value of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Abs(System.Int64)">
            <summary>
                Returns the absolute value of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Abs(System.Single)">
            <summary>
                Returns the absolute value of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Abs(System.Double)">
            <summary>
                Returns the absolute value of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Abs(System.Decimal)">
            <summary>
                Returns the absolute value of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Abs(System.Numerics.Complex)">
            <summary>
                Returns the absolute value of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Abs``1(``0)">
            <summary>
                Returns the absolute value of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.DoubleAbs(System.SByte)">
            <summary>
                Returns the absolute value of a specified number as a double value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.DoubleAbs(System.Int16)">
            <summary>
                Returns the absolute value of a specified number as a double value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.DoubleAbs(System.Int32)">
            <summary>
                Returns the absolute value of a specified number as a double value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.DoubleAbs(System.Int64)">
            <summary>
                Returns the absolute value of a specified number as a double value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.DoubleAbs(System.Single)">
            <summary>
                Returns the absolute value of a specified number as a double value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.DoubleAbs(System.Double)">
            <summary>
                Returns the absolute value of a specified number as a double value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.DoubleAbs(System.Decimal)">
            <summary>
                Returns the absolute value of a specified number as a double value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.DoubleAbs(System.Numerics.Complex)">
            <summary>
                Returns the absolute value of a specified number as a double value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.DoubleAbs``1(``0)">
            <summary>
                Returns the absolute value of a specified number as a double value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.AbsCompare(System.SByte,System.SByte)">
            <summary>
                Compares absolute values of two specified values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>
                A 32-bit signed integer that indicates the relationship between the two comparands.
                <list type="table">
                    <item>
                        <term> Less than 0 </term>
                        <description> The absolute of <paramref name="x"/> is smaller than <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> 0 </term>
                        <description> The absolute of <paramref name="x"/> is same with <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> Greater than 0 </term>
                        <description> The absolute of <paramref name="x"/> is larger than <paramref name="y"/>'s one. . </description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.AbsCompare(System.Int16,System.Int16)">
            <summary>
                Compares absolute values of two specified values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>
                A 32-bit signed integer that indicates the relationship between the two comparands.
                <list type="table">
                    <item>
                        <term> Less than 0 </term>
                        <description> The absolute of <paramref name="x"/> is smaller than <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> 0 </term>
                        <description> The absolute of <paramref name="x"/> is same with <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> Greater than 0 </term>
                        <description> The absolute of <paramref name="x"/> is larger than <paramref name="y"/>'s one. . </description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.AbsCompare(System.Int32,System.Int32)">
            <summary>
                Compares absolute values of two specified values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>
                A 32-bit signed integer that indicates the relationship between the two comparands.
                <list type="table">
                    <item>
                        <term> Less than 0 </term>
                        <description> The absolute of <paramref name="x"/> is smaller than <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> 0 </term>
                        <description> The absolute of <paramref name="x"/> is same with <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> Greater than 0 </term>
                        <description> The absolute of <paramref name="x"/> is larger than <paramref name="y"/>'s one. . </description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.AbsCompare(System.Int64,System.Int64)">
            <summary>
                Compares absolute values of two specified values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>
                A 32-bit signed integer that indicates the relationship between the two comparands.
                <list type="table">
                    <item>
                        <term> Less than 0 </term>
                        <description> The absolute of <paramref name="x"/> is smaller than <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> 0 </term>
                        <description> The absolute of <paramref name="x"/> is same with <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> Greater than 0 </term>
                        <description> The absolute of <paramref name="x"/> is larger than <paramref name="y"/>'s one. . </description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.AbsCompare(System.Single,System.Single)">
            <summary>
                Compares absolute values of two specified values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>
                A 32-bit signed integer that indicates the relationship between the two comparands.
                <list type="table">
                    <item>
                        <term> Less than 0 </term>
                        <description> The absolute of <paramref name="x"/> is smaller than <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> 0 </term>
                        <description> The absolute of <paramref name="x"/> is same with <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> Greater than 0 </term>
                        <description> The absolute of <paramref name="x"/> is larger than <paramref name="y"/>'s one. . </description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.AbsCompare(System.Double,System.Double)">
            <summary>
                Compares absolute values of two specified values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>
                A 32-bit signed integer that indicates the relationship between the two comparands.
                <list type="table">
                    <item>
                        <term> Less than 0 </term>
                        <description> The absolute of <paramref name="x"/> is smaller than <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> 0 </term>
                        <description> The absolute of <paramref name="x"/> is same with <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> Greater than 0 </term>
                        <description> The absolute of <paramref name="x"/> is larger than <paramref name="y"/>'s one. . </description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.AbsCompare(System.Decimal,System.Decimal)">
            <summary>
                Compares absolute values of two specified values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>
                A 32-bit signed integer that indicates the relationship between the two comparands.
                <list type="table">
                    <item>
                        <term> Less than 0 </term>
                        <description> The absolute of <paramref name="x"/> is smaller than <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> 0 </term>
                        <description> The absolute of <paramref name="x"/> is same with <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> Greater than 0 </term>
                        <description> The absolute of <paramref name="x"/> is larger than <paramref name="y"/>'s one. . </description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.AbsCompare(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
                Compares absolute values of two specified values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>
                A 32-bit signed integer that indicates the relationship between the two comparands.
                <list type="table">
                    <item>
                        <term> Less than 0 </term>
                        <description> The absolute of <paramref name="x"/> is smaller than <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> 0 </term>
                        <description> The absolute of <paramref name="x"/> is same with <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> Greater than 0 </term>
                        <description> The absolute of <paramref name="x"/> is larger than <paramref name="y"/>'s one. . </description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.AbsCompare``1(``0,``0)">
            <summary>
                Compares absolute values of two specified values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>
                A 32-bit signed integer that indicates the relationship between the two comparands.
                <list type="table">
                    <item>
                        <term> Less than 0 </term>
                        <description> The absolute of <paramref name="x"/> is smaller than <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> 0 </term>
                        <description> The absolute of <paramref name="x"/> is same with <paramref name="y"/>'s one. </description>
                    </item>
                    <item>
                        <term> Greater than 0 </term>
                        <description> The absolute of <paramref name="x"/> is larger than <paramref name="y"/>'s one. . </description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Acos(System.Double)">
            <summary>
                Returns the angle whose cosine is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Acos(System.Single)">
            <summary>
                Returns the angle whose cosine is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Acos(System.Decimal)">
            <summary>
                Returns the angle whose cosine is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Acos(System.Numerics.Complex)">
            <summary>
                Returns the angle whose cosine is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Acos``1(``0)">
            <summary>
                Returns the angle whose cosine is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Asin(System.Double)">
            <summary>
                Returns the angle whose sine is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Asin(System.Single)">
            <summary>
                Returns the angle whose sine is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Asin(System.Decimal)">
            <summary>
                Returns the angle whose sine is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Asin(System.Numerics.Complex)">
            <summary>
                Returns the angle whose sine is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Asin``1(``0)">
            <summary>
                Returns the angle whose sine is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Atan(System.Double)">
            <summary>
                Returns the angle whose tangent is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Atan(System.Single)">
            <summary>
                Returns the angle whose tangent is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Atan(System.Decimal)">
            <summary>
                Returns the angle whose tangent is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Atan(System.Numerics.Complex)">
            <summary>
                Returns the angle whose tangent is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Atan``1(``0)">
            <summary>
                Returns the angle whose tangent is the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Atan2(System.Double,System.Double)">
            <summary>
                Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Atan2(System.Single,System.Single)">
            <summary>
                Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Atan2(System.Decimal,System.Decimal)">
            <summary>
                Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Atan2``1(``0,``0)">
            <summary>
                Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Ceiling(System.Double)">
            <summary>
                Returns the smallest integral value greater than or equal to the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Ceiling(System.Decimal)">
            <summary>
                Returns the smallest integral value greater than or equal to the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Ceiling(System.Single)">
            <summary>
                Returns the smallest integral value greater than or equal to the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Ceiling``1(``0)">
            <summary>
                Returns the smallest integral value greater than or equal to the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.E``1">
            <summary>
                Gets the natural logarithmic base, specified by the constant, <c>e</c>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.PI``1">
            <summary>
                Gets the ratio of the circumference of a circle to its diameter, specified by the constant, π.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Cos(System.Double)">
            <summary>
                Returns the cosine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Cos(System.Single)">
            <summary>
                Returns the cosine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Cos(System.Decimal)">
            <summary>
                Returns the cosine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Cos(System.Numerics.Complex)">
            <summary>
                Returns the cosine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Cos``1(``0)">
            <summary>
                Returns the cosine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Cosh(System.Double)">
            <summary>
                Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Cosh(System.Single)">
            <summary>
                Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Cosh(System.Decimal)">
            <summary>
                Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Cosh(System.Numerics.Complex)">
            <summary>
                Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Cosh``1(``0)">
            <summary>
                Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Exp(System.Double)">
            <summary>
                Returns e raised to the specified power.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Exp(System.Single)">
            <summary>
                Returns e raised to the specified power.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Exp(System.Decimal)">
            <summary>
                Returns e raised to the specified power.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Exp(System.Numerics.Complex)">
            <summary>
                Returns e raised to the specified power.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Exp``1(``0)">
            <summary>
                Returns e raised to the specified power.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Floor(System.Double)">
            <summary>
                Returns the largest integral value less than or equal to the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Floor(System.Decimal)">
            <summary>
                Returns the largest integral value less than or equal to the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Floor(System.Single)">
            <summary>
                Returns the largest integral value less than or equal to the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Floor``1(``0)">
            <summary>
                Returns the largest integral value less than or equal to the specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log(System.Double)">
            <summary>
                Returns the logarithm of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log(System.Single)">
            <summary>
                Returns the logarithm of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log(System.Decimal)">
            <summary>
                Returns the logarithm of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log(System.Numerics.Complex)">
            <summary>
                Returns the logarithm of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log``1(``0)">
            <summary>
                Returns the logarithm of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log(System.Double,System.Double)">
            <summary>
                Returns the logarithm of a specified number.
            </summary>
            <param name="a"></param>
            <param name="newBase"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log(System.Single,System.Single)">
            <summary>
                Returns the logarithm of a specified number.
            </summary>
            <param name="a"></param>
            <param name="newBase"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log(System.Decimal,System.Decimal)">
            <summary>
                Returns the logarithm of a specified number.
            </summary>
            <param name="a"></param>
            <param name="newBase"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
                Returns the logarithm of a specified number.
            </summary>
            <param name="a"></param>
            <param name="newBase"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log``1(``0,``0)">
            <summary>
                Returns the logarithm of a specified number.
            </summary>
            <param name="a"></param>
            <param name="newBase"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log10(System.Double)">
            <summary>
                Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log10(System.Single)">
            <summary>
                Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log10(System.Decimal)">
            <summary>
                Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log10(System.Numerics.Complex)">
            <summary>
                Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Log10``1(``0)">
            <summary>
                Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Max(System.SByte,System.SByte)">
            <summary>
                Returns the larger of two specified numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Max(System.Int16,System.Int16)">
            <summary>
                Returns the larger of two specified numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Max(System.Int32,System.Int32)">
            <summary>
                Returns the larger of two specified numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Max(System.Int64,System.Int64)">
            <summary>
                Returns the larger of two specified numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Max(System.Byte,System.Byte)">
            <summary>
                Returns the larger of two specified numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Max(System.UInt16,System.UInt16)">
            <summary>
                Returns the larger of two specified numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Max(System.UInt32,System.UInt32)">
            <summary>
                Returns the larger of two specified numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Max(System.UInt64,System.UInt64)">
            <summary>
                Returns the larger of two specified numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Max(System.Single,System.Single)">
            <summary>
                Returns the larger of two specified numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Max(System.Double,System.Double)">
            <summary>
                Returns the larger of two specified numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Max(System.Decimal,System.Decimal)">
            <summary>
                Returns the larger of two specified numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Max``1(``0,``0)">
            <summary>
                Returns the larger of two specified numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Min(System.SByte,System.SByte)">
            <summary>
                Returns the smaller of two numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Min(System.Int16,System.Int16)">
            <summary>
                Returns the smaller of two numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Min(System.Int32,System.Int32)">
            <summary>
                Returns the smaller of two numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Min(System.Int64,System.Int64)">
            <summary>
                Returns the smaller of two numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Min(System.Byte,System.Byte)">
            <summary>
                Returns the smaller of two numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Min(System.UInt16,System.UInt16)">
            <summary>
                Returns the smaller of two numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Min(System.UInt32,System.UInt32)">
            <summary>
                Returns the smaller of two numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Min(System.UInt64,System.UInt64)">
            <summary>
                Returns the smaller of two numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Min(System.Single,System.Single)">
            <summary>
                Returns the smaller of two numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Min(System.Double,System.Double)">
            <summary>
                Returns the smaller of two numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Min(System.Decimal,System.Decimal)">
            <summary>
                Returns the smaller of two numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Min``1(``0,``0)">
            <summary>
                Returns the smaller of two numbers.
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Pow(System.Double,System.Double)">
            <summary>
                Returns a specified number raised to the specified power.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Pow(System.Single,System.Single)">
            <summary>
                Returns a specified number raised to the specified power.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Pow(System.Decimal,System.Decimal)">
            <summary>
                Returns a specified number raised to the specified power.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Pow(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
                Returns a specified number raised to the specified power.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Pow``1(``0,``0)">
            <summary>
                Returns a specified number raised to the specified power.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sign(System.SByte)">
            <summary>
                Returns an integer that indicates the sign of a number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sign(System.Int16)">
            <summary>
                Returns an integer that indicates the sign of a number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sign(System.Int32)">
            <summary>
                Returns an integer that indicates the sign of a number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sign(System.Int64)">
            <summary>
                Returns an integer that indicates the sign of a number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sign(System.Single)">
            <summary>
                Returns an integer that indicates the sign of a number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sign(System.Double)">
            <summary>
                Returns an integer that indicates the sign of a number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sign(System.Decimal)">
            <summary>
                Returns an integer that indicates the sign of a number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sign``1(``0)">
            <summary>
                Returns an integer that indicates the sign of a number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sin(System.Double)">
            <summary>
                Returns the sine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sin(System.Single)">
            <summary>
                Returns the sine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sin(System.Decimal)">
            <summary>
                Returns the sine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sin(System.Numerics.Complex)">
            <summary>
                Returns the sine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sin``1(``0)">
            <summary>
                Returns the sine of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sqrt(System.Double)">
            <summary>
                Returns the square root of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sqrt(System.Single)">
            <summary>
                Returns the square root of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sqrt(System.Decimal)">
            <summary>
                Returns the square root of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sqrt(System.Numerics.Complex)">
            <summary>
                Returns the square root of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Sqrt``1(``0)">
            <summary>
                Returns the square root of a specified number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Tan(System.Double)">
            <summary>
                Returns the tangent of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Tan(System.Single)">
            <summary>
                Returns the tangent of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Tan(System.Decimal)">
            <summary>
                Returns the tangent of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Tan(System.Numerics.Complex)">
            <summary>
                Returns the tangent of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Tan``1(``0)">
            <summary>
                Returns the tangent of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Tanh(System.Double)">
            <summary>
                Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Tanh(System.Single)">
            <summary>
                Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Tanh(System.Decimal)">
            <summary>
                Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Tanh(System.Numerics.Complex)">
            <summary>
                Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Tanh``1(``0)">
            <summary>
                Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Truncate(System.Double)">
            <summary>
                Calculates the integral part of a number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Truncate(System.Decimal)">
            <summary>
                Calculates the integral part of a number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Truncate(System.Single)">
            <summary>
                Calculates the integral part of a number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdMath.Truncate``1(``0)">
            <summary>
                Calculates the integral part of a number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.Optimizations.Allocation`1">
            <summary>
            Resolves array pool repaying by disposer or finalizer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:NeodymiumDotNet.Optimizations.Allocation`1.Array">
            <summary>
            Gets the reserved array.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Optimizations.Allocation`1.Memory">
            <summary>
            Gets the reserved array as <see cref="T:System.Memory`1"/> which is sized as just the specified length.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Optimizations.Allocation`1.Span">
            <summary>
            Gets the reserved array as <see cref="T:System.Span`1"/> which is sized as just the specified length.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Allocation`1.#ctor(System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="minLength"></param>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Allocation`1.Dispose">
            <summary>
            Frees allocated array.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Allocation`1.Finalize">
            <summary>
            Frees allocated array if it has not been released yet.
            </summary>
        </member>
        <member name="T:NeodymiumDotNet.Optimizations.AllocationSlim`1">
            <summary>
            Resolves array pool repaying by ref disposer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:NeodymiumDotNet.Optimizations.AllocationSlim`1.Array">
            <summary>
            Gets the reserved array.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Optimizations.AllocationSlim`1.Memory">
            <summary>
            Gets the reserved array as <see cref="T:System.Memory`1"/> which is sized as just the specified length.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Optimizations.AllocationSlim`1.Span">
            <summary>
            Gets the reserved array as <see cref="T:System.Span`1"/> which is sized as just the specified length.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.AllocationSlim`1.#ctor(System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="minLength"></param>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.AllocationSlim`1.Dispose">
            <summary>
            Frees allocated array.
            </summary>
        </member>
        <member name="T:NeodymiumDotNet.Optimizations.ExpressionComparer">
            <summary>
                Represents an expression comparison operation.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Optimizations.ExpressionComparer.Instance">
            <summary>
                Returns an instance of <see cref="T:NeodymiumDotNet.Optimizations.ExpressionComparer"/>.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.Expression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.ConstantExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.ParameterExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.UnaryExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.BinaryExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.MemberExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.InvocationExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.ConditionalExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.NewExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.LambdaExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.BlockExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.LoopExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.LabelExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.NewArrayExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.DefaultExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.GetHashCode(System.Linq.Expressions.IndexExpression)">
            <summary>
                Calculates the hash value of the specified expression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.UnaryExpression,System.Linq.Expressions.UnaryExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.BinaryExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.MemberExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.MethodCallExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.InvocationExpression,System.Linq.Expressions.InvocationExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.ConditionalExpression,System.Linq.Expressions.ConditionalExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.NewExpression,System.Linq.Expressions.NewExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.BlockExpression,System.Linq.Expressions.BlockExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.LoopExpression,System.Linq.Expressions.LoopExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.LabelExpression,System.Linq.Expressions.LabelExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.NewArrayExpression,System.Linq.Expressions.NewArrayExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.DefaultExpression,System.Linq.Expressions.DefaultExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionComparer.Equals(System.Linq.Expressions.IndexExpression,System.Linq.Expressions.IndexExpression)">
            <summary>
                Determines whether two expressions are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.Optimizations.ExpressionEx">
            <summary>
                Provides utilities for <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionEx.ConsoleWriteLine(System.Linq.Expressions.Expression)">
            <summary>
                Gets a method caller expression of <see cref="M:System.Console.WriteLine(System.Object)"/>.
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionEx.For(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <summary>
                Creates a <see cref="T:System.Linq.Expressions.BlockExpression"/> that represents an for-loop.
            </summary>
            <param name="initialize"></param>
            <param name="condition"></param>
            <param name="iterate"></param>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionEx.For(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
                Creates a <see cref="T:System.Linq.Expressions.BlockExpression"/> that represents an for-loop.
            </summary>
            <param name="initialize"></param>
            <param name="condition"></param>
            <param name="iterate"></param>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionEx.For(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.BlockExpression)">
            <summary>
                Creates a <see cref="T:System.Linq.Expressions.BlockExpression"/> that represents an for-loop.
            </summary>
            <param name="initialize"></param>
            <param name="condition"></param>
            <param name="iterate"></param>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.ExpressionEx.For(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.LabelTarget,System.Linq.Expressions.BlockExpression})">
            <summary>
                Creates a <see cref="T:System.Linq.Expressions.BlockExpression"/> that represents an for-loop.
            </summary>
            <param name="initialize"></param>
            <param name="condition"></param>
            <param name="iterate"></param>
            <param name="blockBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.Optimizations.LambdaArgsVisitor">
            <summary>
            An expression tree visitor to replace parameters of lambda.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Optimizations.LambdaArgsVisitor.ArgsReplacementPairs">
            <summary>
                Gets a replacement pairs from parameters to other expressions.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.LambdaArgsVisitor.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression})">
            <summary>
                Creates a new instance.
            </summary>
            <param name="argsReplacementPairs"></param>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.LambdaArgsVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
                Visits a parameter expression to return its replaced expression.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.Optimizations.Linq.NdSimdLinq">
            <summary>
                LINQ style chainable operations which use SIMD intrinsics for performance.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Linq.NdSimdLinq.Select``1(NeodymiumDotNet.NdArray{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
                [Pure] Projects each element of a NdArray into a new form.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndarray"> A NdArray for values to invoke a transform function on. </param>
            <param name="selector"> A transform function to apply to each element. </param>
            <returns> [<c>$ReturnValue.Shape == NdArray.Shape</c>] </returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Linq.NdSimdLinq.Zip``1(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Linq.NdSimdLinq.Zip``1(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0}},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Linq.NdSimdLinq.Zip``1(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0}})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Linq.NdSimdLinq.Zip``1(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0}},System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0}})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Linq.NdSimdLinq.Zip``1(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0}})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Linq.NdSimdLinq.Zip``1(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0}},System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0}})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item4.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Linq.NdSimdLinq.Zip``1(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0}})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Linq.NdSimdLinq.Zip``1(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0}},System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0}})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item4.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item5.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Linq.NdSimdLinq.Zip``1(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0,``0}})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
            <param name="ndarray6"> [<c>ndarray1.Shape == ndarray6.Shape</c>] </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Linq.NdSimdLinq.Zip``1(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0}},System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0,``0}})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item4.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item5.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item6.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Linq.NdSimdLinq.Zip``1(NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0,``0,``0}})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndarray1"></param>
            <param name="ndarray2"> [<c>ndarray1.Shape == ndarray2.Shape</c>] </param>
            <param name="ndarray3"> [<c>ndarray1.Shape == ndarray3.Shape</c>] </param>
            <param name="ndarray4"> [<c>ndarray1.Shape == ndarray4.Shape</c>] </param>
            <param name="ndarray5"> [<c>ndarray1.Shape == ndarray5.Shape</c>] </param>
            <param name="ndarray6"> [<c>ndarray1.Shape == ndarray6.Shape</c>] </param>
            <param name="ndarray7"> [<c>ndarray1.Shape == ndarray7.Shape</c>] </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.Linq.NdSimdLinq.Zip``1(System.ValueTuple{NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0},NeodymiumDotNet.NdArray{``0}},System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0,``0,``0}})">
            <summary>
                [Pure] Applies selector against each corresponding element set of input NdArrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argsTuple">
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item2.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item3.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item4.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item5.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item6.Shape</c>]</para>
                <para>[<c>argsTuple.Item1.Shape == argsTuple.Item7.Shape</c>]</para>
                <para>The tuple of <see cref="T:NeodymiumDotNet.NdArray`1"/> for selector. </para>
            </param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.Optimizations.SimdVisitor`1">
            <summary>
            An expression tree visitor to convert primitive value lambda operation to SIMD.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:NeodymiumDotNet.Optimizations.SimdVisitor`1.NewArguments">
            <summary>
                Gets a set of new parameters.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.#ctor(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>
            Creates a new instance to simdize a specified lamda.
            </summary>
            <param name="func">
            A lambda expression to simdize.
            </param>
            <param name="usesSpecialMethod">
            Tries to use specially implemented SIMD method in the evaluation of specified lambda if <c>true</c>; otherwise does not.
            If <c>true</c> the calculation performance will be faster but the result may change in some case.
            </param>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.Visit(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.VisitFuncLambda(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
                Visits the children of the operation expression for primitive value.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.VisitFuncLambda(System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
                Visits the children of the operation expression for primitive value.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.VisitFuncLambda(System.Linq.Expressions.Expression{System.Func{`0,`0,`0}})">
            <summary>
                Visits the children of the operation expression for primitive value.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.VisitFuncLambda(System.Linq.Expressions.Expression{System.Func{`0,`0,`0,`0}})">
            <summary>
                Visits the children of the operation expression for primitive value.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.VisitFuncLambda(System.Linq.Expressions.Expression{System.Func{`0,`0,`0,`0,`0}})">
            <summary>
                Visits the children of the operation expression for primitive value.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.VisitFuncLambda(System.Linq.Expressions.Expression{System.Func{`0,`0,`0,`0,`0,`0}})">
            <summary>
                Visits the children of the operation expression for primitive value.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.VisitFuncLambda(System.Linq.Expressions.Expression{System.Func{`0,`0,`0,`0,`0,`0,`0}})">
            <summary>
                Visits the children of the operation expression for primitive value.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.VisitFuncLambda(System.Linq.Expressions.Expression{System.Func{`0,`0,`0,`0,`0,`0,`0,`0}})">
            <summary>
                Visits the children of the operation expression for primitive value.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.SimdVisitor`1.VisitFuncLambda(System.Linq.Expressions.Expression{System.Func{`0,`0,`0,`0,`0,`0,`0,`0,`0}})">
            <summary>
                Visits the children of the operation expression for primitive value.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.Optimizations.VectorOperation">
            <summary>
                Provides operation conversions from SISD to SIMD.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Identity``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies identity operations for a n-d array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="result"> It can be same instance with <paramref name="value"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Identity``1(System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies identity operations for a memory sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="result"></param>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Dot``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})">
            <summary>
            Calculates dot product of the two specified sequences.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.DotOptimized``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})">
            <summary>
            Calculates dot product of the two specified sequences.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.UnaryNegate``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies unarynegate operations for a n-d array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="result"> It can be same instance with <paramref name="value"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.UnaryNegate``1(System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies unarynegate operations for a memory sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Complement``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies complement operations for a n-d array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="result"> It can be same instance with <paramref name="value"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Complement``1(System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies complement operations for a memory sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Add``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies add operations for n-d arrays pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Shape &lt;= lhs.Shape</c>] </param>
            <param name="rhs"> [<c>result.Shape &lt;= rhs.Shape</c>] </param>
            <param name="result"> It can be same instance with <paramref name="lhs"/> and <paramref name="rhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Add``1(``0,NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies add operations for a scalar and a n-d array pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"> [<c>result.Shape &lt;= rhs.Shape</c>] </param>
            <param name="result"> It can be same instance with and <paramref name="rhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Add``1(NeodymiumDotNet.INdArray{``0},``0,NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies add operations for a n-d array and a scalar pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Shape &lt;= lhs.Shape</c>] </param>
            <param name="rhs"></param>
            <param name="result"> It can be same instance with <paramref name="lhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Add``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies add operations for memory sequences pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Length &lt;= lhs.Length</c>] </param>
            <param name="rhs"> [<c>result.Length &lt;= rhs.Length</c>] </param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Add``1(``0,System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies add operations for a scalar and a memory sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"> [<c>result.Length &lt;= rhs.Length</c>] </param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Add``1(System.ReadOnlyMemory{``0},``0,System.Memory{``0})">
            <summary>
                Applies add operations for a memory sequence and a scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Length &lt;= lhs.Length</c>] </param>
            <param name="rhs"></param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Subtract``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies subtract operations for n-d arrays pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Shape &lt;= lhs.Shape</c>] </param>
            <param name="rhs"> [<c>result.Shape &lt;= rhs.Shape</c>] </param>
            <param name="result"> It can be same instance with <paramref name="lhs"/> and <paramref name="rhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Subtract``1(``0,NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies subtract operations for a scalar and a n-d array pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"> [<c>result.Shape &lt;= rhs.Shape</c>] </param>
            <param name="result"> It can be same instance with and <paramref name="rhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Subtract``1(NeodymiumDotNet.INdArray{``0},``0,NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies subtract operations for a n-d array and a scalar pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Shape &lt;= lhs.Shape</c>] </param>
            <param name="rhs"></param>
            <param name="result"> It can be same instance with <paramref name="lhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Subtract``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies subtract operations for memory sequences pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Length &lt;= lhs.Length</c>] </param>
            <param name="rhs"> [<c>result.Length &lt;= rhs.Length</c>] </param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Subtract``1(``0,System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies subtract operations for a scalar and a memory sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"> [<c>result.Length &lt;= rhs.Length</c>] </param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Subtract``1(System.ReadOnlyMemory{``0},``0,System.Memory{``0})">
            <summary>
                Applies subtract operations for a memory sequence and a scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Length &lt;= lhs.Length</c>] </param>
            <param name="rhs"></param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Multiply``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies multiply operations for n-d arrays pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Shape &lt;= lhs.Shape</c>] </param>
            <param name="rhs"> [<c>result.Shape &lt;= rhs.Shape</c>] </param>
            <param name="result"> It can be same instance with <paramref name="lhs"/> and <paramref name="rhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Multiply``1(``0,NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies multiply operations for a scalar and a n-d array pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"> [<c>result.Shape &lt;= rhs.Shape</c>] </param>
            <param name="result"> It can be same instance with and <paramref name="rhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Multiply``1(NeodymiumDotNet.INdArray{``0},``0,NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies multiply operations for a n-d array and a scalar pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Shape &lt;= lhs.Shape</c>] </param>
            <param name="rhs"></param>
            <param name="result"> It can be same instance with <paramref name="lhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Multiply``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies multiply operations for memory sequences pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Length &lt;= lhs.Length</c>] </param>
            <param name="rhs"> [<c>result.Length &lt;= rhs.Length</c>] </param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Multiply``1(``0,System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies multiply operations for a scalar and a memory sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"> [<c>result.Length &lt;= rhs.Length</c>] </param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Multiply``1(System.ReadOnlyMemory{``0},``0,System.Memory{``0})">
            <summary>
                Applies multiply operations for a memory sequence and a scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Length &lt;= lhs.Length</c>] </param>
            <param name="rhs"></param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Divide``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies divide operations for n-d arrays pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Shape &lt;= lhs.Shape</c>] </param>
            <param name="rhs"> [<c>result.Shape &lt;= rhs.Shape</c>] </param>
            <param name="result"> It can be same instance with <paramref name="lhs"/> and <paramref name="rhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Divide``1(``0,NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies divide operations for a scalar and a n-d array pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"> [<c>result.Shape &lt;= rhs.Shape</c>] </param>
            <param name="result"> It can be same instance with and <paramref name="rhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Divide``1(NeodymiumDotNet.INdArray{``0},``0,NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies divide operations for a n-d array and a scalar pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Shape &lt;= lhs.Shape</c>] </param>
            <param name="rhs"></param>
            <param name="result"> It can be same instance with <paramref name="lhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Divide``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies divide operations for memory sequences pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Length &lt;= lhs.Length</c>] </param>
            <param name="rhs"> [<c>result.Length &lt;= rhs.Length</c>] </param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Divide``1(``0,System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies divide operations for a scalar and a memory sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"> [<c>result.Length &lt;= rhs.Length</c>] </param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Divide``1(System.ReadOnlyMemory{``0},``0,System.Memory{``0})">
            <summary>
                Applies divide operations for a memory sequence and a scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Length &lt;= lhs.Length</c>] </param>
            <param name="rhs"></param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseAnd``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies bitwiseand operations for n-d arrays pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Shape &lt;= lhs.Shape</c>] </param>
            <param name="rhs"> [<c>result.Shape &lt;= rhs.Shape</c>] </param>
            <param name="result"> It can be same instance with <paramref name="lhs"/> and <paramref name="rhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseAnd``1(``0,NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies bitwiseand operations for a scalar and a n-d array pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"> [<c>result.Shape &lt;= rhs.Shape</c>] </param>
            <param name="result"> It can be same instance with and <paramref name="rhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseAnd``1(NeodymiumDotNet.INdArray{``0},``0,NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies bitwiseand operations for a n-d array and a scalar pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Shape &lt;= lhs.Shape</c>] </param>
            <param name="rhs"></param>
            <param name="result"> It can be same instance with <paramref name="lhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseAnd``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies bitwiseand operations for memory sequences pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Length &lt;= lhs.Length</c>] </param>
            <param name="rhs"> [<c>result.Length &lt;= rhs.Length</c>] </param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseAnd``1(``0,System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies bitwiseand operations for a scalar and a memory sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"> [<c>result.Length &lt;= rhs.Length</c>] </param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseAnd``1(System.ReadOnlyMemory{``0},``0,System.Memory{``0})">
            <summary>
                Applies bitwiseand operations for a memory sequence and a scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Length &lt;= lhs.Length</c>] </param>
            <param name="rhs"></param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseOr``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies bitwiseor operations for n-d arrays pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Shape &lt;= lhs.Shape</c>] </param>
            <param name="rhs"> [<c>result.Shape &lt;= rhs.Shape</c>] </param>
            <param name="result"> It can be same instance with <paramref name="lhs"/> and <paramref name="rhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseOr``1(``0,NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies bitwiseor operations for a scalar and a n-d array pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"> [<c>result.Shape &lt;= rhs.Shape</c>] </param>
            <param name="result"> It can be same instance with and <paramref name="rhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseOr``1(NeodymiumDotNet.INdArray{``0},``0,NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies bitwiseor operations for a n-d array and a scalar pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Shape &lt;= lhs.Shape</c>] </param>
            <param name="rhs"></param>
            <param name="result"> It can be same instance with <paramref name="lhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseOr``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies bitwiseor operations for memory sequences pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Length &lt;= lhs.Length</c>] </param>
            <param name="rhs"> [<c>result.Length &lt;= rhs.Length</c>] </param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseOr``1(``0,System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies bitwiseor operations for a scalar and a memory sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"> [<c>result.Length &lt;= rhs.Length</c>] </param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseOr``1(System.ReadOnlyMemory{``0},``0,System.Memory{``0})">
            <summary>
                Applies bitwiseor operations for a memory sequence and a scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Length &lt;= lhs.Length</c>] </param>
            <param name="rhs"></param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseXor``1(NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies bitwisexor operations for n-d arrays pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Shape &lt;= lhs.Shape</c>] </param>
            <param name="rhs"> [<c>result.Shape &lt;= rhs.Shape</c>] </param>
            <param name="result"> It can be same instance with <paramref name="lhs"/> and <paramref name="rhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseXor``1(``0,NeodymiumDotNet.INdArray{``0},NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies bitwisexor operations for a scalar and a n-d array pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"> [<c>result.Shape &lt;= rhs.Shape</c>] </param>
            <param name="result"> It can be same instance with and <paramref name="rhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseXor``1(NeodymiumDotNet.INdArray{``0},``0,NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Applies bitwisexor operations for a n-d array and a scalar pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Shape &lt;= lhs.Shape</c>] </param>
            <param name="rhs"></param>
            <param name="result"> It can be same instance with <paramref name="lhs"/>, and in that case the instance will be overwritten. </param>
            <exception cref="T:NeodymiumDotNet.ShapeMismatchException" />
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseXor``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies bitwisexor operations for memory sequences pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Length &lt;= lhs.Length</c>] </param>
            <param name="rhs"> [<c>result.Length &lt;= rhs.Length</c>] </param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseXor``1(``0,System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
                Applies bitwisexor operations for a scalar and a memory sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"> [<c>result.Length &lt;= rhs.Length</c>] </param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.BitwiseXor``1(System.ReadOnlyMemory{``0},``0,System.Memory{``0})">
            <summary>
                Applies bitwisexor operations for a memory sequence and a scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"> [<c>result.Length &lt;= lhs.Length</c>] </param>
            <param name="rhs"></param>
            <param name="result"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0,``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0,``0,``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Optimizations.VectorOperation.Simdize``1(System.Linq.Expressions.Expression{System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0}})">
            <summary>
                Converts the specified operation for primitive type to the operation delegate for primitive array with SIMD.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.ParallelIterationStrategy">
            <summary>
                Provides parallelized implementation of <see cref="T:NeodymiumDotNet.IterationStrategy"/>.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.ParallelIterationStrategy.Instance">
            <summary>
                Gets singleton instance of <see cref="T:NeodymiumDotNet.ParallelIterationStrategy"/>.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.ParallelIterationStrategy.For(System.Int32,System.Int32,System.Action{System.Int32})">
            <inheritdoc />
        </member>
        <member name="T:NeodymiumDotNet.Random.LcNamedParameterSet">
            <summary>
                Named LCG parameter set identifier.
            </summary>
        </member>
        <member name="F:NeodymiumDotNet.Random.LcNamedParameterSet.Java">
            <summary>
                <para> The parameter set of Java java.util.Random. </para>
                <para> <c>m = 0x4000000uL - 1uL, a = 48271, c = 0, bitMaskBottom = 16, bitMaskTop = 32</c> </para>
            </summary>
        </member>
        <member name="F:NeodymiumDotNet.Random.LcNamedParameterSet.ParkMiller">
            <summary>
                <para> The parameter set of Borland C/C++ rand(). </para>
                <para> <c>m = 0x4000000uL - 1uL, a = 48271, c = 0, bitMaskBottom = 16, bitMaskTop = 32</c> </para>
            </summary>
        </member>
        <member name="T:NeodymiumDotNet.Random.LinearCongruentialGenerator">
            <summary>
                Random value generator which implements LCG algorithm.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.LinearCongruentialGenerator.Seed">
            <summary>
                The initial seed.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.LinearCongruentialGenerator.M">
            <summary>
                The modulus.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.LinearCongruentialGenerator.A">
            <summary>
                The multiplier.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.LinearCongruentialGenerator.C">
            <summary>
                The increment.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.LinearCongruentialGenerator.BitMask">
            <summary>
                The bitmask for truncation of lower bits.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.LinearCongruentialGenerator.BitMaskBottom">
            <summary>
                The lower index of the bitmask range.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.LinearCongruentialGenerator.BitMaskTop">
            <summary>
                The upper index of the bitmask range.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.LinearCongruentialGenerator.AvailableBitCount">
            <summary>
                [<c>AvailableBitCount == BitMaskTop - BitMaskBottom</c>] The width of the bitmask range.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Random.LinearCongruentialGenerator.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
                <para> Creates new <see cref="T:NeodymiumDotNet.Random.LinearCongruentialGenerator"/> instance. </para>
                <para> [<c>this.BitMask == GetBitMask(bitMaskBottom, bitMaskTop)</c>] </para>
            </summary>
            <param name="seed"></param>
            <param name="m"></param>
            <param name="a"></param>
            <param name="c"></param>
            <param name="bitMaskBottom"></param>
            <param name="bitMaskTop"></param>
        </member>
        <member name="M:NeodymiumDotNet.Random.LinearCongruentialGenerator.#ctor(System.Int64,NeodymiumDotNet.Random.LcNamedParameterSet,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Creates new <see cref="T:NeodymiumDotNet.Random.LinearCongruentialGenerator"/> instance.
            </summary>
            <param name="seed"></param>
            <param name="parameterSet"></param>
            <param name="bitMaskBottom"></param>
            <param name="bitMaskTop"></param>
        </member>
        <member name="M:NeodymiumDotNet.Random.LinearCongruentialGenerator.NextBitArray">
            <inheritdoc />
            <summary>
                Get single random value of <see cref="T:System.Int32"/>,
                which is between <see cref="F:System.Int32.MinValue"/> - <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
                The random value which is between <see cref="F:System.Int32.MinValue"/> - <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.LinearCongruentialGenerator.GetBitMask(System.Int32,System.Int32)">
            <summary>
                Gets a bitmask whose bits between <paramref name="bottom" /> and <paramref name="top" /> are 1.
            </summary>
            <param name="bottom"> The minimum bit index of 1. </param>
            <param name="top"> The maximum bit index of 1. </param>
            <returns>
                <para> The bitmask whose bits between <paramref name="bottom" /> and <paramref name="top" /> are 1. </para>
                <para>
                    For example, <c>GetBitMask(0, 0) == 0b0000uL</c>,
                    <c>GetBitMask(1, 3) == 0b0110uL</c>,
                    and <c>GetBitMask(2, 6) == 0b111100uL</c>
                </para>
            </returns>
        </member>
        <member name="T:NeodymiumDotNet.Random.MersenneTwisterGenerator">
            <inheritdoc />
            <summary>
                Random value generator which implements Mersenne twister algorithm.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Random.MersenneTwisterGenerator.#ctor(System.Int32)">
            <summary>
                Creates new <see cref="T:NeodymiumDotNet.Random.MersenneTwisterGenerator"/> instance with single seed.
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:NeodymiumDotNet.Random.MersenneTwisterGenerator.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
                Creates new <see cref="T:NeodymiumDotNet.Random.MersenneTwisterGenerator" /> instance with seed array.
            </summary>
            <param name="seedArray"></param>
        </member>
        <member name="M:NeodymiumDotNet.Random.MersenneTwisterGenerator.NextBitArray">
            <inheritdoc />
            <summary>
                Get single random value of <see cref="T:System.Int32" />,
                which is between <see cref="F:System.Int32.MinValue" /> - <see cref="F:System.Int32.MaxValue" />.
            </summary>
            <returns>
                The random value which is between <see cref="F:System.Int32.MinValue" /> - <see cref="F:System.Int32.MaxValue" />.
            </returns>
        </member>
        <member name="T:NeodymiumDotNet.Random.RandomGenerator">
            <summary>
                [Thread-Unsafe] Random value base generator interface.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.RandomGenerator.Default">
            <summary>
                Default random generator.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomGenerator.NextBitArray">
            <summary>
                [Thread-Unsafe] Generates next 32-bits random value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomGenerator.NextInt32">
            <summary>
                [Thread-Unsafe] Get single random value of <see cref="T:System.Int32"/>,
                which is between <c>0</c> - <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomGenerator.NextInt32(System.Int32)">
            <summary>
                [Thread-Unsafe] Get multiple random values of <see cref="T:System.Int32"/>,
                which are between <c>0</c> - <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomGenerator.NextInt64">
            <summary>
                [Thread-Unsafe] Get single random value of <see cref="T:System.Int64"/>,
                which is between <c>0</c> - <see cref="F:System.Int64.MaxValue"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomGenerator.NextInt64(System.Int32)">
            <summary>
                [Thread-Unsafe] Get multiple random values of <see cref="T:System.Int64"/>,
                which are between <c>0</c> - <see cref="F:System.Int64.MaxValue"/>.
            </summary>
            <param name="count"> [<c>0 &lt;= count</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomGenerator.NextFloat32">
            <summary>
                [Thread-Unsafe] Get single random value of <see cref="T:System.Single"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomGenerator.NextFloat32(System.Int32)">
            <summary>
                [Thread-Unsafe] Get multiple random values of <see cref="T:System.Single"/>.
            </summary>
            <param name="count"> [<c>0 &lt;= count</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomGenerator.NextFloat64">
            <summary>
                [Thread-Unsafe] Get single random value of <see cref="T:System.Double"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomGenerator.NextFloat64(System.Int32)">
            <summary>
                [Thread-Unsafe] Get multiple random values of <see cref="T:System.Double"/>.
            </summary>
            <param name="count"> [<c>0 &lt;= count</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomGenerator.NextNorm32">
            <summary>
                [Thread-Unsafe] Get single normal distribution random value of <see cref="T:System.Single"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomGenerator.NextNorm32(System.Int32)">
            <summary>
                [Thread-Unsafe] Get multiple normal distribution random values of <see cref="T:System.Single"/>.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomGenerator.NextNorm64">
            <summary>
                [Thread-Unsafe] Get single normal distribution random value of <see cref="T:System.Double"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomGenerator.NextNorm64(System.Int32)">
            <summary>
                [Thread-Unsafe] Get multiple normal distribution random values of <see cref="T:System.Double"/>.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.Random.RandomNdArray">
            <summary>
                Random operation for <see cref="T:NeodymiumDotNet.NdArray`1"/>.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomNdArray.RandInt32(System.Int32[],NeodymiumDotNet.Random.RandomGenerator)">
            <summary>
                Gets a <see cref="T:NeodymiumDotNet.NdArray`1"/> whose values are <c>int.MinValue - int.MaxValue</c> random <see cref="T:System.Int32"/> value.
            </summary>
            <param name="shape"> [Non-Null] </param>
            <param name="gen"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomNdArray.RandInt64(System.Int32[],NeodymiumDotNet.Random.RandomGenerator)">
            <summary>
                Gets a <see cref="T:NeodymiumDotNet.NdArray`1"/> whose values are <c>long.MinValue - long.MaxValue</c> random <see cref="T:System.Int64"/> value.
            </summary>
            <param name="shape"> [Non-Null] </param>
            <param name="gen"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomNdArray.Rand32(System.Int32[],NeodymiumDotNet.Random.RandomGenerator)">
            <summary>
                Gets a <see cref="T:NeodymiumDotNet.NdArray`1"/> whose values are <c>0 - 1</c> random <see cref="T:System.Single"/> value.
            </summary>
            <param name="shape"> [Non-Null] </param>
            <param name="gen"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomNdArray.RandN32(System.Int32[],NeodymiumDotNet.Random.RandomGenerator)">
            <summary>
                Gets a <see cref="T:NeodymiumDotNet.NdArray`1"/> whose values are normal distribution random <see cref="T:System.Single"/> value.
            </summary>
            <param name="shape"> [Non-Null] </param>
            <param name="gen"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomNdArray.Rand64(System.Int32[],NeodymiumDotNet.Random.RandomGenerator)">
            <summary>
                Gets a <see cref="T:NeodymiumDotNet.NdArray`1"/> whose values are <c>0 - 1</c> random <see cref="T:System.Double"/> value.
            </summary>
            <param name="shape"> [Non-Null] </param>
            <param name="gen"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Random.RandomNdArray.RandN64(System.Int32[],NeodymiumDotNet.Random.RandomGenerator)">
            <summary>
                Gets a <see cref="T:NeodymiumDotNet.NdArray`1"/> whose values are normal distribution random <see cref="T:System.Double"/> value.
            </summary>
            <param name="shape"> [Non-Null] </param>
            <param name="gen"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.Random.XorShift128Generator">
            <inheritdoc />
            <summary>
                Random value generator which implements 128-bit xorshift algorithm.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.XorShift128Generator.SeedW">
            <summary>
                1st seed value.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.XorShift128Generator.SeedX">
            <summary>
                2nd seed value.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.XorShift128Generator.SeedY">
            <summary>
                3rd seed value.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.XorShift128Generator.SeedZ">
            <summary>
                4th seed value.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Random.XorShift128Generator.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Creates new <see cref="T:NeodymiumDotNet.Random.XorShift128Generator"/> instance.
            </summary>
            <param name="w"> The 1st seed value. </param>
            <param name="x"> The 2nd seed value. </param>
            <param name="y"> The 3rd seed value. </param>
            <param name="z"> The 4th seed value. </param>
        </member>
        <member name="M:NeodymiumDotNet.Random.XorShift128Generator.NextBitArray">
            <inheritdoc />
            <summary>
                Get single random value of <see cref="T:System.Int32"/>,
                which is between <see cref="F:System.Int32.MinValue"/> - <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
                The random value which is between <see cref="F:System.Int32.MinValue"/> - <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="T:NeodymiumDotNet.Random.XorShift32Generator">
            <inheritdoc />
            <summary>
                Random value generator which implements 32-bit xorshift algorithm.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.XorShift32Generator.Seed">
            <summary>
                The seed value.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Random.XorShift32Generator.#ctor(System.Nullable{System.Int32})">
            <summary>
                Creates new <see cref="T:NeodymiumDotNet.Random.XorShift32Generator"/> instance.
            </summary>
            <param name="seed"> The seed value. </param>
        </member>
        <member name="M:NeodymiumDotNet.Random.XorShift32Generator.NextBitArray">
            <inheritdoc />
            <summary>
                Get single random value of <see cref="T:System.Int32"/>,
                which is between <see cref="F:System.Int32.MinValue"/> - <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
                The random value which is between <see cref="F:System.Int32.MinValue"/> - <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="T:NeodymiumDotNet.Random.XorShift64Generator">
            <inheritdoc />
            <summary>
                Random value generator which implements 64-bit xorshift algorithm.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.XorShift64Generator.Seed">
            <summary>
                The seed value.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Random.XorShift64Generator.#ctor(System.Nullable{System.Int32})">
            <summary>
                Creates new <see cref="T:NeodymiumDotNet.Random.XorShift64Generator"/> instance.
            </summary>
            <param name="seed"> The seed value. </param>
        </member>
        <member name="M:NeodymiumDotNet.Random.XorShift64Generator.NextBitArray">
            <inheritdoc />
            <summary>
                Get single random value of <see cref="T:System.Int32"/>,
                which is between <see cref="F:System.Int32.MinValue"/> - <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
                The random value which is between <see cref="F:System.Int32.MinValue"/> - <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="T:NeodymiumDotNet.Random.XorShift96Generator">
            <inheritdoc />
            <summary>
                Random value generator which implements 96-bit xorshift algorithm.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.XorShift96Generator.SeedX">
            <summary>
                The 1st seed value.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.XorShift96Generator.SeedY">
            <summary>
                The 2nd seed value.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Random.XorShift96Generator.SeedZ">
            <summary>
                The 3rd seed value.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Random.XorShift96Generator.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Creates new <see cref="T:NeodymiumDotNet.Random.XorShift96Generator"/> instance.
            </summary>
            <param name="x"> The 1st seed value. </param>
            <param name="y"> The 2nd seed value. </param>
            <param name="z"> The 3rd seed value. </param>
        </member>
        <member name="M:NeodymiumDotNet.Random.XorShift96Generator.NextBitArray">
            <inheritdoc />
            <summary>
                Get single random value of <see cref="T:System.Int32" />,
                which is between <see cref="F:System.Int32.MinValue" /> - <see cref="F:System.Int32.MaxValue" />.
            </summary>
            <returns>
                The random value which is between <see cref="F:System.Int32.MinValue" /> - <see cref="F:System.Int32.MaxValue" />.
            </returns>
        </member>
        <member name="T:NeodymiumDotNet.Range">
            <summary>
                The range of number-line.
                This range enumerate <c>Start</c> to <c>End - 1</c>.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Range.Empty">
            <summary>
                Gets the <see cref="T:NeodymiumDotNet.Range"/> instance which means empty range.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Range.Whole">
            <summary>
                Gets the <see cref="T:NeodymiumDotNet.Range"/> instance which means whole range.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Range.Start">
            <summary>
                Gets the start position.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Range.End">
            <summary>
                Gets the end position.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.Range.Step">
            <summary>
                [<c>Step &gt; 0</c>] Gets the iteration step.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Range.#ctor(NeodymiumDotNet.Index,NeodymiumDotNet.Index,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="step"> [<c>0 &gt; step</c>] </param>
        </member>
        <member name="M:NeodymiumDotNet.Range.Map(System.Int32,System.Int32)">
            <summary>
                Maps the relative index to base number-line.
            </summary>
            <param name="relIndex"> The relative index on this range. </param>
            <param name="length"> The length of base number-line. </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Range.MapLength(System.Int32)">
            <summary>
                Maps this range length to base number-line.
            </summary>
            <param name="length"> The length of base number-line. </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Range.ToString">
            <summary>
                Returns the string representation of the current Range object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Range.Create(System.Int32)">
            <summary>
                [Pure] Creates a new <see cref="T:NeodymiumDotNet.Range"/>.
            </summary>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Range.Create(System.Int32,System.Int32)">
            <summary>
                [Pure] Creates a new <see cref="T:NeodymiumDotNet.Range"/>.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Range.Create(System.Int32,System.Int32,System.Int32)">
            <summary>
                [Pure] Creates a new <see cref="T:NeodymiumDotNet.Range"/>.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Range.Ceiling(System.Int32,System.Int32)">
            <summary>
                [Pure] Calculate ceiling of <see cref="T:System.Int32"/>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.RawNdArray`1">
            <summary>
                Mutable multi-dim NdArray.
                This type is not compatible with <see cref="T:NeodymiumDotNet.NdArray`1"/>.
                Use <see cref="M:NeodymiumDotNet.MutableNdArray`1.ToImmutable"/> or <see cref="M:NeodymiumDotNet.MutableNdArray`1.MoveToImmutable"/> to get immutable NdArray from this.
            </summary>
            <typeparam name="T"> The data type. </typeparam>
        </member>
        <member name="P:NeodymiumDotNet.RawNdArray`1.Entity">
            <summary>
                The NdArray elements entity.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.RawNdArray`1.#ctor(NeodymiumDotNet.RawNdArrayImpl{`0})">
            <summary>
                Creates new NdArray object with entity object.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:NeodymiumDotNet.RawNdArray`1.#ctor(NeodymiumDotNet.IndexArray)">
            <summary>
                Creates new NdArray object with values and shapes.
            </summary>
            <param name="shape"> [<c>shape.Product() == array.Length</c>] </param>
        </member>
        <member name="M:NeodymiumDotNet.RawNdArray`1.#ctor(System.Array)">
            <summary>
                Creates new NdArray object.
            </summary>
            <param name="array"></param>
        </member>
        <member name="T:NeodymiumDotNet.ShapeMismatchException">
            <summary>
                Means the <see cref="T:NeodymiumDotNet.NdArray`1"/> argument shape is mismatched.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.ShapeMismatchException.#ctor(System.String)">
            <summary>
                Creates a new instance.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:NeodymiumDotNet.Statistics.NdStatistics">
            <summary>
                Statistics calculations for <see cref="T:NeodymiumDotNet.NdArray`1"/>.
                These calculations evaluates result eagerly.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.Statistics.NdStatistics.All(NeodymiumDotNet.NdArray{System.Boolean})">
            <summary>
                Determines whether all elements of a NdArray is <c>true</c>.
            </summary>
            <param name="ndarray"> An <see cref="T:NeodymiumDotNet.NdArray`1"/> whose elements to determine. </param>
            <returns>
                <c>true</c> if all elements of the NdArray is <c>true</c>;
                otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.Statistics.NdStatistics.All``1(NeodymiumDotNet.NdArray{``0},System.Func{``0,System.Boolean})">
            <summary>
                Determines whether all elements of a NdArray satisfies a condition.
            </summary>
            <param name="ndarray"> An <see cref="T:NeodymiumDotNet.NdArray`1"/> whose elements to apply the predicate to. </param>
            <param name="predicate"> A function to test all elements for a condition. </param>
            <returns>
                <c>true</c> if all elements in the NdArray pass the test in the specified predicate;
                otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.Statistics.NdStatistics.Any(NeodymiumDotNet.NdArray{System.Boolean})">
            <summary>
                Determines whether any element of a NdArray is <c>true</c>.
            </summary>
            <param name="ndarray"> An <see cref="T:NeodymiumDotNet.NdArray`1"/> whose elements to determine. </param>
            <returns>
                <c>true</c> if any element of the NdArray is <c>true</c>;
                otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.Statistics.NdStatistics.Any``1(NeodymiumDotNet.NdArray{``0},System.Func{``0,System.Boolean})">
            <summary>
                Determines whether any element of a NdArray satisfies a condition.
            </summary>
            <param name="ndarray"> An <see cref="T:NeodymiumDotNet.NdArray`1"/> whose elements to apply the predicate to. </param>
            <param name="predicate"> A function to test all elements for a condition. </param>
            <returns>
                <c>true</c> if any elements in the NdArray pass the test in the specified predicate;
                otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:NeodymiumDotNet.Statistics.NdStatistics.Max``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                Returns the largest value of the <paramref name="ndArray"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Statistics.NdStatistics.ArgMax``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                Returns the index of the largest value of the <paramref name="ndArray"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Statistics.NdStatistics.Mean``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                Computes mean from all elements of the <paramref name="ndArray"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Statistics.NdStatistics.Min``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                Returns the smallest value of the <paramref name="ndArray"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Statistics.NdStatistics.ArgMin``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                Returns the index of the smallest value of the <paramref name="ndArray"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Statistics.NdStatistics.SampleVar``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                Computes sample variance from all elements of the <paramref name="ndArray"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Statistics.NdStatistics.StdDev``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                Computes sample variance from all elements of the <paramref name="ndArray"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Statistics.NdStatistics.Sum``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                Computes sum from all elements of the <paramref name="ndArray"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.Statistics.NdStatistics.UnbiasedVar``1(NeodymiumDotNet.INdArray{``0})">
            <summary>
                Computes unbiased variance from all elements of the <paramref name="ndArray"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.ValueTrait">
            <summary>
                Extension class for <see cref="T:NeodymiumDotNet.IValueTrait`1"/>.
            </summary>
        </member>
        <member name="T:NeodymiumDotNet.ValueTrait.Cache`1">
            <summary>
                Provides operator calculation for custom type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.RegisterTrait``1(NeodymiumDotNet.IValueTrait{``0})">
            <summary>
                Defines value trait strategy for global system.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="trait"></param>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.IsNumber``1">
            <summary>
                Returns <c>true</c> if the type supports mathematical operators.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.Zero``1">
            <summary>
                Gets 0 value.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.One``1">
            <summary>
                Gets 1 value.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.UnaryPlus``1(``0)">
            <summary>
                Calculates UnaryPlus operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.UnaryNegate``1(``0)">
            <summary>
                Calculates UnaryNegate operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.Not``1(``0)">
            <summary>
                Calculates Not operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.Complement``1(``0)">
            <summary>
                Calculates Complement operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.Add``1(``0,``0)">
            <summary>
                Calculates Add operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.Subtract``1(``0,``0)">
            <summary>
                Calculates Subtract operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.Multiply``1(``0,``0)">
            <summary>
                Calculates Multiply operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.Divide``1(``0,``0)">
            <summary>
                Calculates Divide operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.Modulo``1(``0,``0)">
            <summary>
                Calculates Modulo operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.BitwiseAnd``1(``0,``0)">
            <summary>
                Calculates BitwiseAnd operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.BitwiseOr``1(``0,``0)">
            <summary>
                Calculates BitwiseOr operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.BitwiseXor``1(``0,``0)">
            <summary>
                Calculates BitwiseXor operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.Increment``1(``0)">
            <summary>
                Calculates Increment operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.Decrement``1(``0)">
            <summary>
                Calculates Decrement operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.ShiftLeft``1(``0,System.Int32)">
            <summary>
                Calculates ShiftLeft operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.ShiftRight``1(``0,System.Int32)">
            <summary>
                Calculates ShiftRight operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.Equals``1(``0,``0)">
            <summary>
                Calculates Equals operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.NotEquals``1(``0,``0)">
            <summary>
                Calculates NotEquals operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.LessThan``1(``0,``0)">
            <summary>
                Calculates LessThan operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.LessThanOrEquals``1(``0,``0)">
            <summary>
                Calculates LessThanOrEquals operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.GreaterThan``1(``0,``0)">
            <summary>
                Calculates GreaterThan operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.GreaterThanOrEquals``1(``0,``0)">
            <summary>
                Calculates GreaterThanOrEquals operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.FromLong``1(System.Int64)">
            <summary>
                Cast from <see href="long"/> value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.FromDouble``1(System.Double)">
            <summary>
                Cast from <see href="double"/> value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.ToLong``1(``0)">
            <summary>
                Cast to <see href="long"/> value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NeodymiumDotNet.ValueTrait.ToDouble``1(``0)">
            <summary>
                Cast to <see href="double"/> value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:NeodymiumDotNet.IValueTrait`1">
            <summary>
                <para> Operator calculation interface. </para>
                <para> When this interface will be implemented, the following rules must be adhered. </para>
                <para> - The implementation has only a constructor which has no arguments. </para>
                <para> - All of the implemented operations are pure. </para>
                <para>
                       - If the implementation does not support the operation, the method throws
                         <see cref="T:System.NotSupportedException"/> immediately for any arguments.
                </para>
                <para>
                       - If the operation will fail for the input arguments, the method throws
                         <see cref="T:System.ArithmeticException"/> (including <see cref="T:System.OverflowException"/>).
                </para>
                <para>
                       - If <typeparamref name="T"/> is nullable and some arguments are <c>null</c>,
                         the method can throw <see cref="T:System.NullReferenceException"/> (not must).
                </para>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.IsNumber">
            <summary>
                Returns <c>true</c> if <typeparamref name="T"/> supports <c>0</c> and <c>1</c>;
                otherwise <c>false</c>.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.Zero">
            <summary>
                Gets zero value of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.One">
            <summary>
                Gets one value of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.UnaryPlus(`0)">
            <summary>
                [Pure] Unary plus operation.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T"/> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.UnaryNegate(`0)">
            <summary>
                [Pure] Unary negation operation.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.Not(`0)">
            <summary>
                [Pure] Logical-not operation.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.Complement(`0)">
            <summary>
                [Pure] Complement operation.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.Add(`0,`0)">
            <summary>
                [Pure] Mathematical add operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.Subtract(`0,`0)">
            <summary>
                [Pure] Mathematical subtract operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.Multiply(`0,`0)">
            <summary>
                [Pure] Mathematical multiply operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.Divide(`0,`0)">
            <summary>
                [Pure] Mathematical divide operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.Modulo(`0,`0)">
            <summary>
                [Pure] Mathematical modulo operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.BitwiseAnd(`0,`0)">
            <summary>
                [Pure] Bitwise-add operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.BitwiseOr(`0,`0)">
            <summary>
                [Pure] Bitwise-or operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.BitwiseXor(`0,`0)">
            <summary>
                [Pure] Bitwise-xor operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.Increment(`0)">
            <summary>
                [Pure] Numerical increment operation.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.Decrement(`0)">
            <summary>
                [Pure] Numerical decrement operation.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.ShiftLeft(`0,System.Int32)">
            <summary>
                [Pure] Bit shift to left operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.ShiftRight(`0,System.Int32)">
            <summary>
                [Pure] Bit shift to right operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.Equals(`0,`0)">
            <summary>
                [Pure] Object equality operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.NotEquals(`0,`0)">
            <summary>
                [Pure] Object not-equality operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.LessThan(`0,`0)">
            <summary>
                [Pure] Level comparison operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.LessThanOrEquals(`0,`0)">
            <summary>
                [Pure] Level comparison operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.GreaterThan(`0,`0)">
            <summary>
                [Pure] Level comparison operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.GreaterThanOrEquals(`0,`0)">
            <summary>
                [Pure] Level comparison operation.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"> The operation for <typeparamref name="T" /> is not supported. </exception>
            <exception cref="T:System.ArithmeticException"> The calculation for the arguments was failed mathematically. </exception>
            <exception cref="T:System.NullReferenceException"> <typeparamref name="T"/> is nullable, and some arguments are null. </exception>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.FromLong(System.Int64)">
            <summary>
                Casts from long value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.FromDouble(System.Double)">
            <summary>
                Casts from double value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.ToLong(`0)">
            <summary>
                Casts to long value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.IValueTrait`1.ToDouble(`0)">
            <summary>
                Casts to double value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.Container`1">
            <summary>
                Zero or one value container.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NeodymiumDotNet.EnumerableEx">
            <summary>
                Additional Linq to Object operators.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.EnumerableEx.SingleWhenOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the item if <paramref name="source"/> has only an item;
                otherwise <c>default</c>.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.EnumerableEx.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
                Zips 2 sequences to tuple sequence.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="src1"></param>
            <param name="src2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.EnumerableEx.ZipLeft``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
                Zips 2 sequences to tuple sequence.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="src1"></param>
            <param name="src2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.EnumerableEx.ZipOuter``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
                Zips 2 sequences to tuple sequence.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="src1"></param>
            <param name="src2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.EnumerableEx.SelectTop``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
                Projects each element into a new form, 
                but the first element will be projected with special selector.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="topSelector"></param>
            <param name="othersSelector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.EnumerableEx.SelectTail``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
                Projects each element into a new form, 
                but the last element will be projected with special selector.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="othersSelector"></param>
            <param name="tailSelector"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.InternalUtils.CeilingPow2(System.Int32)">
            <summary>
                Ceilings the specified value to the nearest power of 2.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.InternalUtils.Exchange``1(``0@,``0@)">
            <summary>
                Exchanges two values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:NeodymiumDotNet.InternalUtils.FillImplicitSlices(NeodymiumDotNet.IndexOrRange[],System.Int32)">
            <summary>
                Fills whole range to shapes.
            </summary>
            <param name="indices"></param>
            <param name="rank"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.InternalUtils.CalculateAxesFormedShape(NeodymiumDotNet.IndexArray,System.ReadOnlySpan{System.Int32})">
            <summary>
                For axes-formed linq operator, calculates new shape.
            </summary>
            <param name="sourceShape"></param>
            <param name="axes"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.InternalUtils.CalculatePartialShape(NeodymiumDotNet.IndexArray,System.ReadOnlySpan{System.Int32},System.Int32)">
            <summary>
                For axes-formed linq, operator, calculates the partial array shape.
            </summary>
            <param name="sourceShape"></param>
            <param name="axes"></param>
            <param name="flattenIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.InternalUtils.Contains(System.Span{System.Int32},System.Int32)">
            <summary>
                Determines whether an element is in the <see cref="T:System.Span`1"/>.
            </summary>
            <param name="span"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.InternalUtils.Contains(System.ReadOnlySpan{System.Int32},System.Int32)">
            <summary>
                Determines whether an element is in the <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <param name="span"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.InternalUtils.GetOrCopyBuffer``1(NeodymiumDotNet.NdArray{``0})">
            <summary>
                Gets an equivalent memory buffer of the data of the specified NdArray.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.InternalUtils.GetOrCopyBuffer``1(NeodymiumDotNet.MutableNdArray{``0})">
            <summary>
                Gets an equivalent memory buffer of the data of the specified NdArray.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ndArray"></param>
            <returns></returns>
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArrayImpl`1.Item(System.Int32)">
            <summary>
                The element indexer which is called with the index of NdArray flatten sequence.
                NOTE: Do not capture with potential of lifetime extension.
            </summary>
            <param name="flattenIndex"></param>
        </member>
        <member name="P:NeodymiumDotNet.MutableNdArrayImpl`1.Item(System.ReadOnlySpan{System.Int32})">
            <summary>
                The element indexer which is called with flatten index.
                NOTE: Do not capture with potential of lifetime extension.
            </summary>
            <remarks>
                This indexer may be destructive for <paramref name="shapedIndices"/>.
            </remarks>
            <param name="shapedIndices"></param>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArrayImpl`1.#ctor(NeodymiumDotNet.IndexArray)">
            <inheritdoc />
            <summary>
                Create new MutableNdArrayImpl{T} object with assigned shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArrayImpl`1.GetItemRef(System.Int32)">
            <summary>
                Gets reference to element which is called with the index of NdArray flatten sequence.
            </summary>
            <param name="flattenIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.MutableNdArrayImpl`1.GetItemRef(System.ReadOnlySpan{System.Int32})">
            <summary>
                Gets reference to element which is called with flatten index.
            </summary>
            <param name="shapedIndices"></param>
        </member>
        <member name="P:NeodymiumDotNet.NdArrayImpl.Length">
            <summary>
                The element count when this NdArray was flatten.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.NdArrayImpl.Rank">
            <summary>
                The rank of NdArray.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.NdArrayImpl.Shape">
            <summary>
                The shape of NdArray.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayImpl.ToFlattenIndex(System.Int32)">
            <summary>
                [Pure] Calculate the index of NdArray flatten sequence from the shaped indices.
            </summary>
            <param name="i1"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayImpl.ToFlattenIndex(System.Int32,System.Int32)">
            <summary>
                [Pure] Calculate the index of NdArray flatten sequence from the shaped indices.
            </summary>
            <param name="i1"></param>
            <param name="i2"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayImpl.ToFlattenIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
                [Pure] Calculate the index of NdArray flatten sequence from the shaped indices.
            </summary>
            <param name="i1"></param>
            <param name="i2"></param>
            <param name="i3"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayImpl.ToFlattenIndex(System.ReadOnlySpan{System.Int32})">
            <summary>
                [Pure] Calculate the index of NdArray flatten sequence from the shaped indices.
            </summary>
            <param name="shapedIndices"> [<c>shapedIndices.Length == shape.Length</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayImpl.ToFlattenIndex(NeodymiumDotNet.IndexArray,System.ReadOnlySpan{System.Int32})">
            <summary>
                [Pure] Calculate the index of NdArray flatten sequence from the shaped indices.
            </summary>
            <param name="shape"></param>
            <param name="shapedIndices"> [<c>shapedIndices.Length == shape.Length</c>] </param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayImpl.ToShapedIndices(System.Int32)">
            <summary>
                [Pure] Calculate the shaped indices from the index of NdArray flatten sequence.
            </summary>
            <param name="flattenIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayImpl.ToShapedIndices(NeodymiumDotNet.IndexArray,System.Int32)">
            <summary>
                [Pure] Calculate the shaped indices from the index of NdArray flatten sequence.
            </summary>
            <param name="shape"></param>
            <param name="flattenIndex"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.NdArrayImpl`1">
            <inheritdoc />
            <summary>
                Immutable NdArray core system implement base class.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.NdArrayImpl`1.Item(System.Int32)">
            <summary>
                The element indexer which is called with the index of NdArray flatten sequence.
            </summary>
            <param name="flattenIndex"></param>
        </member>
        <member name="P:NeodymiumDotNet.NdArrayImpl`1.Item(System.ReadOnlySpan{System.Int32})">
            <summary>
                The element indexer which is called with flatten index.
            </summary>
            <remarks>
                This indexer may be destructive for <paramref name="shapedIndices"/>.
            </remarks>
            <param name="shapedIndices"></param>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayImpl`1.#ctor(NeodymiumDotNet.IndexArray)">
            <summary>
                Create new NdArrayImpl{T} object with assigned shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayImpl`1.GetItem(System.Int32)">
            <summary>
                Get element which is called with the index of NdArray flatten sequence.
            </summary>
            <param name="flattenIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayImpl`1.GetItem(System.ReadOnlySpan{System.Int32})">
            <summary>
                Get element which is called with flatten index.
            </summary>
            <param name="shapedIndices"></param>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayImpl`1.CopyToCore(System.Span{`0})">
            <summary>
                Copies the elements to destination.
            </summary>
            <param name="dest"></param>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayImpl`1.CopyTo(System.Span{`0})">
            <summary>
                Copies the elements to destination.
            </summary>
            <param name="dest"></param>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayImpl`1.ToArray">
            <summary>
                Create copy array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeodymiumDotNet.NdArrayImpl`1.GetHashCode">
            <summary>
                [Pure]
            </summary>
            <returns></returns>
        </member>
        <member name="P:NeodymiumDotNet.RawNdArrayImpl`1.Buffer">
            <summary>
                NOTE: This array may be managed by ArrayPool.
                Do not capture with potential of lifetime extension.
            </summary>
        </member>
        <member name="P:NeodymiumDotNet.RawNdArrayImpl`1.Length">
            <inheritdoc />
            <summary>
                The element count when this NdArray was flatten.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.RawNdArrayImpl`1.#ctor(NeodymiumDotNet.IndexArray)">
            <inheritdoc />
            <summary>
                Create new RawNdArrayImpl{T} object.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:NeodymiumDotNet.SliceViewNdArrayImpl`1">
            <inheritdoc />
            <summary>
                NdArray sliced view.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.SliceViewNdArrayImpl`1.#ctor(NeodymiumDotNet.NdArrayImpl{`0},NeodymiumDotNet.IndexOrRange[])">
            <inheritdoc />
            <summary>
            </summary>
            <param name="source"></param>
            <param name="slices"> [source.Rank != slices.Length] </param>
        </member>
        <member name="T:NeodymiumDotNet.MutableSliceViewNdArrayImpl`1">
            <inheritdoc />
            <summary>
                NdArray sliced view.
            </summary>
        </member>
        <member name="M:NeodymiumDotNet.MutableSliceViewNdArrayImpl`1.#ctor(NeodymiumDotNet.MutableNdArrayImpl{`0},NeodymiumDotNet.IndexOrRange[])">
            <inheritdoc />
            <summary>
            </summary>
            <param name="source"></param>
            <param name="slices"> [source.Rank != slices.Length] </param>
        </member>
        <member name="M:NeodymiumDotNet.MutableSliceViewNdArrayImpl`1.CalculateShape(NeodymiumDotNet.IndexArray,NeodymiumDotNet.IndexOrRange[])">
            <summary>
                [Pure]
            </summary>
            <param name="sourceShape"></param>
            <param name="slices"></param>
            <returns></returns>
        </member>
        <member name="T:NeodymiumDotNet.TraitAttribute">
            <summary>
                Means that the interface is trait definition type.
            </summary>
        </member>
        <member name="T:NeodymiumDotNet.TraitMemberAttribute">
            <summary>
                Means that the interface member is trait definition.
            </summary>
        </member>
    </members>
</doc>
